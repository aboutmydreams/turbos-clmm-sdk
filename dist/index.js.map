{"version":3,"sources":["../src/index.ts","../src/constants/network.ts","../src/constants/magic-numbers.ts","../src/sdk.ts","../src/lib/account.ts","../src/lib/base.ts","../src/lib/legacy.ts","../src/utils/sui-kit.ts","../src/lib/contract.ts","../src/lib/math.ts","../src/lib/pool.ts","../src/utils/validate-object-response.ts","../src/utils/deprecated-pool-rewards.ts","../src/lib/nft.ts","../src/utils/collect-fees-quote.ts","../src/utils/collect-rewards-quote.ts","../src/utils/bit-math.ts","../src/lib/coin.ts","../src/lib/trade.ts","../src/lib/vault.ts","../src/utils/is-null-object-id.ts"],"names":["default","Network","Decimal","BN","Transaction","ZERO","estTokenB","SUI_CLOCK_OBJECT_ID","ONE_MINUTE","typeArguments"],"mappings":"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","sourcesContent":["export { default as BN } from 'bn.js';\nexport { default as Decimal } from 'decimal.js';\nexport * from './constants';\nexport * from './sdk';\nexport * from './lib';\nexport {\n  getObjectId as unstable_getObjectId,\n  getObjectFields as unstable_getObjectFields,\n} from './lib/legacy';\nexport { isDeprecatedPool, deprecatedPoolRewards } from './utils/deprecated-pool-rewards';\n","export enum Network {\n  mainnet = 'mainnet',\n  testnet = 'testnet',\n  /**\n   * Using testnet connection\n   */\n  devnet = 'devnet',\n}\n","export const MAX_TICK_INDEX = 443636;\nexport const MIN_TICK_INDEX = -443636;\n\nexport const MAX_SQRT_PRICE = '79226673515401279992447579055';\nexport const MIN_SQRT_PRICE = '4295048016';\nexport const BIT_PRECISION = 14;\nexport const LOG_B_2_X32 = '59543866431248';\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = '184467440737095516';\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = '15793534762490258745';\n","import { SuiClient, SuiClientOptions, getFullnodeUrl } from '@mysten/sui/client';\nimport { Network } from './constants';\nimport { Pool, Contract, MathUtil, Account, NFT, Coin, Trade, Vault } from './lib';\n\nexport class TurbosSdk {\n  readonly pool: Pool;\n  readonly contract: Contract;\n  readonly math = new MathUtil();\n  readonly account = new Account();\n  readonly coin: Coin;\n  readonly nft: NFT;\n  readonly trade: Trade;\n  readonly provider: SuiClient;\n  readonly vault: Vault;\n\n  constructor(readonly network: Network, clientOrOptions?: SuiClientOptions | SuiClient) {\n    this.provider = clientOrOptions\n      ? clientOrOptions instanceof SuiClient\n        ? clientOrOptions\n        : new SuiClient(clientOrOptions)\n      : new SuiClient({\n          url:\n            network === Network.mainnet\n              ? getFullnodeUrl(Network.mainnet)\n              : getFullnodeUrl(Network.testnet),\n        });\n\n    this.contract = new Contract(this);\n    this.pool = new Pool(this);\n    this.nft = new NFT(this);\n    this.coin = new Coin(this);\n    this.trade = new Trade(this);\n    this.vault = new Vault(this);\n  }\n}\n","import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport type { Keypair } from '@mysten/sui/cryptography';\nimport { generateMnemonic } from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\n\nexport declare module Account {\n  export interface DerivePathOptions {\n    accountIndex?: number;\n    isExternal?: boolean;\n    addressIndex?: number;\n  }\n}\n\nexport class Account {\n  public generateMnemonic(numberOfWords: 12 | 24 = 24): string {\n    return generateMnemonic(wordlist, numberOfWords === 12 ? 128 : 256);\n  }\n\n  public getKeypairFromMnemonics(\n    mnemonics: string,\n    path: Account.DerivePathOptions = {},\n  ): Keypair {\n    const derivePath = this.getDerivePath(path);\n    return Ed25519Keypair.deriveKeypair(mnemonics, derivePath);\n  }\n\n  protected getDerivePath(path: Account.DerivePathOptions = {}) {\n    const { accountIndex = 0, isExternal = false, addressIndex = 0 } = path;\n    return `m/44'/784'/${accountIndex}'/${isExternal ? 1 : 0}'/${addressIndex}'`;\n  }\n}\n","import { LRUCache } from 'lru-cache';\nimport type { TurbosSdk } from '../sdk';\n\nexport class Base {\n  private _lru: LRUCache<{}, {}, unknown> | undefined;\n  private _fetching: Record<string, Promise<any>> = {};\n\n  constructor(protected readonly sdk: TurbosSdk) {}\n\n  protected async getCacheOrSet<T>(\n    key: string,\n    orSet: () => Promise<T>,\n    durationMS: number = 0,\n  ): Promise<T> {\n    const cache = (this._lru ||= new LRUCache({\n      max: 100,\n    }));\n    if (cache.has(key)) {\n      return cache.get(key) as T;\n    }\n    const promise = (this._fetching[key] ||= orSet());\n    const result = await promise;\n    delete this._fetching[key];\n    cache.set(key, result!, { ttl: durationMS });\n    return result;\n  }\n\n  protected get provider() {\n    return this.sdk.provider;\n  }\n\n  protected get math() {\n    return this.sdk.math;\n  }\n\n  protected get account() {\n    return this.sdk.account;\n  }\n\n  protected get network() {\n    return this.sdk.network;\n  }\n\n  protected get contract() {\n    return this.sdk.contract;\n  }\n\n  protected get nft() {\n    return this.sdk.nft;\n  }\n\n  protected get coin() {\n    return this.sdk.coin;\n  }\n\n  protected get trade() {\n    return this.sdk.trade;\n  }\n\n  protected get pool() {\n    return this.sdk.pool;\n  }\n}\n","import {\n  MoveStruct,\n  ObjectOwner,\n  OwnedObjectRef,\n  SuiMoveObject,\n  SuiObjectData,\n  SuiObjectRef,\n  SuiObjectResponse,\n  SuiParsedData,\n} from '@mysten/sui/client';\n\ntype SuiObjectResponseError = any;\n\nexport function getObjectReference(\n  resp: SuiObjectResponse | OwnedObjectRef,\n): SuiObjectRef | undefined {\n  if ('reference' in resp) {\n    return resp.reference;\n  }\n  const exists = getSuiObjectData(resp);\n  if (exists) {\n    return {\n      objectId: exists.objectId,\n      version: exists.version,\n      digest: exists.digest,\n    };\n  }\n  return getObjectDeletedResponse(resp);\n}\n\nexport function getObjectId(\n  data: SuiObjectResponse | SuiObjectRef | OwnedObjectRef,\n): string {\n  if ('objectId' in data) {\n    return data.objectId;\n  }\n  return (\n    getObjectReference(data)?.objectId ??\n    getObjectNotExistsResponse(data as SuiObjectResponse)!\n  );\n}\n\nexport function getObjectFields(\n  resp: SuiObjectResponse | SuiMoveObject | SuiObjectData,\n): MoveStruct | undefined {\n  if ('fields' in resp) {\n    return resp.fields;\n  }\n  return getMoveObject(resp)?.fields;\n}\n\nexport function getMoveObject(\n  data: SuiObjectResponse | SuiObjectData,\n): SuiMoveObject | undefined {\n  const suiObject = 'data' in data ? getSuiObjectData(data) : (data as SuiObjectData);\n\n  if (\n    !suiObject ||\n    !isSuiObjectDataWithContent(suiObject) ||\n    suiObject.content.dataType !== 'moveObject'\n  ) {\n    return undefined;\n  }\n\n  return suiObject.content as SuiMoveObject;\n}\n\nexport interface SuiObjectDataWithContent extends SuiObjectData {\n  content: SuiParsedData;\n}\n\nfunction isSuiObjectDataWithContent(\n  data: SuiObjectData,\n): data is SuiObjectDataWithContent {\n  return data.content !== undefined;\n}\n\nexport function getSuiObjectData(\n  resp: SuiObjectResponse,\n): SuiObjectData | null | undefined {\n  return resp.data;\n}\n\nexport function getObjectDeletedResponse(\n  resp: SuiObjectResponse,\n): SuiObjectRef | undefined {\n  if (\n    resp.error &&\n    'object_id' in resp.error &&\n    'version' in resp.error &&\n    'digest' in resp.error\n  ) {\n    const error = resp.error as SuiObjectResponseError;\n    return {\n      objectId: error.object_id,\n      version: error.version,\n      digest: error.digest,\n    } as SuiObjectRef;\n  }\n\n  return undefined;\n}\n\nexport function getObjectNotExistsResponse(resp: SuiObjectResponse): string | undefined {\n  if (\n    resp.error &&\n    'object_id' in resp.error &&\n    !('version' in resp.error) &&\n    !('digest' in resp.error)\n  ) {\n    return (resp.error as SuiObjectResponseError).object_id as string;\n  }\n\n  return undefined;\n}\n\nexport function isSuiObjectResponse(\n  resp: SuiObjectResponse | SuiObjectData,\n): resp is SuiObjectResponse {\n  return (resp as SuiObjectResponse).data !== undefined;\n}\n\n/**\n * Deriving the object type from the object response\n * @returns 'package' if the object is a package, move object type(e.g., 0x2::coin::Coin<0x2::sui::SUI>)\n * if the object is a move object\n */\nexport function getObjectType(\n  resp: SuiObjectResponse | SuiObjectData,\n): string | null | undefined {\n  const data = isSuiObjectResponse(resp) ? resp.data : resp;\n\n  if (!data?.type && 'data' in resp) {\n    if (data?.content?.dataType === 'package') {\n      return 'package';\n    }\n    return getMoveObjectType(resp);\n  }\n  return data?.type;\n}\n\nexport function getMoveObjectType(resp: SuiObjectResponse): string | undefined {\n  return getMoveObject(resp)?.type;\n}\n\nexport function getObjectOwner(\n  resp: SuiObjectResponse /* | ObjectOwner*/,\n): ObjectOwner | null | undefined {\n  // if (is(resp, ObjectOwner)) {\n  //   return resp;\n  // }\n  return getSuiObjectData(resp)?.owner;\n}\n","import {\n  SuiClient,\n  SuiObjectDataOptions,\n  SuiObjectResponse,\n  type PaginatedObjectsResponse,\n  type SuiObjectDataFilter,\n} from '@mysten/sui/client';\nimport { unstable_getObjectFields } from '..';\n\nexport const multiGetObjects = async (\n  provider: SuiClient,\n  ids: string[],\n  options?: SuiObjectDataOptions,\n): Promise<SuiObjectResponse[]> => {\n  const max = 50;\n  const len = ids.length;\n  if (len > max) {\n    const requests = [];\n    let i = 0;\n    const times = Math.ceil(len / max);\n    for (i; i < times; i++) {\n      requests.push(\n        provider.multiGetObjects({\n          ids: ids.slice(i * max, (i + 1) * max),\n          options,\n        }),\n      );\n    }\n    const response = await Promise.all(requests);\n    return response.flat();\n  }\n\n  return await provider.multiGetObjects({\n    ids,\n    options,\n  });\n};\n\nexport async function forEacGetOwnedObjects<T>(\n  provider: SuiClient,\n  address: string,\n  filter: SuiObjectDataFilter,\n): Promise<T[]> {\n  let dynamicFields: PaginatedObjectsResponse | undefined;\n  let data: T[] = [];\n  do {\n    dynamicFields = await provider.getOwnedObjects({\n      owner: address,\n      cursor: dynamicFields?.nextCursor,\n      options: { showContent: true, showType: true },\n      filter: filter,\n    });\n    if (dynamicFields) {\n      data = [\n        ...data,\n        ...(dynamicFields.data.map((item) => unstable_getObjectFields(item)) as T[]),\n      ];\n    }\n  } while (dynamicFields.hasNextPage);\n\n  return data;\n}\n","/// <reference lib=\"dom\" />\nimport { Network } from '../constants';\nimport { Base } from './base';\nimport { getMoveObjectType, getObjectFields, getObjectId } from './legacy';\nimport * as suiKit from '../utils/sui-kit';\nexport declare module Contract {\n  export interface Fee {\n    fee: number;\n    objectId: string;\n    type: string;\n    tickSpacing: number;\n  }\n\n  export interface Config {\n    PackageId: string;\n    PackageIdOriginal: string;\n    PoolConfig: string;\n    Positions: string;\n    PoolFactoryAdminCap: string;\n    Versioned: string;\n    PoolTableId: string;\n\n    VaultOriginPackageId: string;\n    VaultPackageId: string;\n    VaultGlobalConfig: string;\n    VaultRewarderManager: string;\n    VaultUserTierConfig: string;\n  }\n}\n\nexport class Contract extends Base {\n  async getConfig(): Promise<Contract.Config> {\n    const contractJSON = await this.fetchJSON();\n    return contractJSON[this.network].contract;\n  }\n\n  getFees(): Promise<Contract.Fee[]> {\n    return this.getCacheOrSet('fees', async () => {\n      const contractJSON = await this.fetchJSON();\n      const fees = contractJSON[this.network].fee;\n      const objs = await suiKit.multiGetObjects(this.provider, Object.values(fees), {\n        showContent: true,\n      });\n      return objs.map((obj) => {\n        const fields = getObjectFields(obj) as { fee: number; tick_spacing: number };\n        const objectId = getObjectId(obj);\n        const type = getMoveObjectType(obj)!;\n        return {\n          objectId,\n          type: type.split('<')[1]!.slice(0, -1),\n          fee: fields.fee,\n          tickSpacing: fields.tick_spacing,\n        };\n      });\n    });\n  }\n\n  private fetchJSON() {\n    return this.getCacheOrSet('contract-json', async () => {\n      const response = await fetch(\n        'https://s3.amazonaws.com/app.turbos.finance/sdk/contract.json?t=' + Date.now(),\n        {\n          method: 'GET',\n        },\n      );\n      const data = await response.json();\n      return data as {\n        [key in Network]: {\n          contract: Contract.Config;\n          fee: Record<string, string>;\n        };\n      };\n    });\n  }\n}\n","import BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport {\n  BIT_PRECISION,\n  LOG_B_2_X32,\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\n  MAX_SQRT_PRICE,\n  MIN_SQRT_PRICE,\n} from '../constants';\n\nconst U128 = new BN(2).pow(new BN(128));\n\nexport class MathUtil {\n  priceToSqrtPriceX64(price: Decimal.Value, decimalsA: number, decimalsB: number): BN {\n    return new BN(\n      new Decimal(price)\n        .mul(Decimal.pow(10, decimalsB - decimalsA))\n        .sqrt()\n        .mul(Decimal.pow(2, 64))\n        .floor()\n        .toFixed(0),\n    );\n  }\n\n  sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\n    return new Decimal(sqrtPriceX64.toString())\n      .mul(Decimal.pow(2, -64))\n      .pow(2)\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\n  }\n\n  priceToTickIndex(price: Decimal.Value, decimalsA: number, decimalsB: number): number {\n    return this.sqrtPriceX64ToTickIndex(\n      this.priceToSqrtPriceX64(price, decimalsA, decimalsB),\n    );\n  }\n\n  sqrtPriceX64ToTickIndex(sqrtPriceX64: BN): number {\n    if (\n      sqrtPriceX64.gt(new BN(MAX_SQRT_PRICE)) ||\n      sqrtPriceX64.lt(new BN(MIN_SQRT_PRICE))\n    ) {\n      throw new Error('Provided sqrtPrice is not within the supported sqrtPrice range.');\n    }\n\n    const msb = sqrtPriceX64.bitLength() - 1;\n    const adjustedMsb = new BN(msb - 64);\n    const log2pIntegerX32 = this.signedShiftLeft(adjustedMsb, 32, 128);\n\n    let bit = new BN('8000000000000000', 'hex');\n    let precision = 0;\n    let log2pFractionX64 = new BN(0);\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\n\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\n      r = r.mul(r);\n      let rMoreThanTwo = r.shrn(127);\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\n      bit = bit.shrn(1);\n      precision += 1;\n    }\n\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\n\n    const tickLow = this.signedShiftRight(\n      logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)),\n      64,\n      128,\n    ).toNumber();\n    const tickHigh = this.signedShiftRight(\n      logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)),\n      64,\n      128,\n    ).toNumber();\n\n    if (tickLow == tickHigh) {\n      return tickLow;\n    } else {\n      const derivedTickHighSqrtPriceX64 = this.tickIndexToSqrtPriceX64(tickHigh);\n      if (derivedTickHighSqrtPriceX64.lte(sqrtPriceX64)) {\n        return tickHigh;\n      } else {\n        return tickLow;\n      }\n    }\n  }\n\n  tickIndexToSqrtPriceX64(tickIndex: number): BN {\n    if (tickIndex > 0) {\n      return new BN(this.tickIndexToSqrtPricePositive(tickIndex));\n    } else {\n      return new BN(this.tickIndexToSqrtPriceNegative(tickIndex));\n    }\n  }\n\n  public tickIndexToPrice(\n    tickIndex: number,\n    decimalsA: number,\n    decimalsB: number,\n  ): Decimal {\n    return this.sqrtPriceX64ToPrice(\n      this.tickIndexToSqrtPriceX64(tickIndex),\n      decimalsA,\n      decimalsB,\n    );\n  }\n\n  toX64_Decimal(num: Decimal): Decimal {\n    return num.mul(Decimal.pow(2, 64));\n  }\n\n  fromX64_Decimal(num: Decimal): Decimal {\n    return num.mul(Decimal.pow(2, -64));\n  }\n\n  scaleDown(value: Decimal.Value, decimals: number) {\n    return new Decimal(value).div(Decimal.pow(10, decimals)).toString();\n  }\n\n  scaleUp(value: Decimal.Value, decimals: number) {\n    return new Decimal(value).mul(Decimal.pow(10, decimals)).toString();\n  }\n\n  bitsToNumber(bits: number | string, len: number = 32) {\n    return JSBI.toNumber(JSBI.asIntN(len, JSBI.BigInt(bits)));\n  }\n\n  subUnderflowU128(n0: BN, n1: BN): BN {\n    return n0.add(U128).sub(n1).mod(U128);\n  }\n\n  protected tickIndexToSqrtPricePositive(tick: number) {\n    let ratio: BN;\n\n    if ((tick & 1) != 0) {\n      ratio = new BN('79232123823359799118286999567');\n    } else {\n      ratio = new BN('79228162514264337593543950336');\n    }\n\n    if ((tick & 2) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79236085330515764027303304731')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 4) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79244008939048815603706035061')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 8) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79259858533276714757314932305')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 16) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79291567232598584799939703904')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 32) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79355022692464371645785046466')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 64) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79482085999252804386437311141')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 128) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('79736823300114093921829183326')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 256) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('80248749790819932309965073892')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 512) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('81282483887344747381513967011')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 1024) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('83390072131320151908154831281')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 2048) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('87770609709833776024991924138')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 4096) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('97234110755111693312479820773')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 8192) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('119332217159966728226237229890')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 16384) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('179736315981702064433883588727')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 32768) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('407748233172238350107850275304')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 65536) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('2098478828474011932436660412517')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 131072) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('55581415166113811149459800483533')),\n        96,\n        256,\n      );\n    }\n    if ((tick & 262144) != 0) {\n      ratio = this.signedShiftRight(\n        ratio.mul(new BN('38992368544603139932233054999993551')),\n        96,\n        256,\n      );\n    }\n\n    return this.signedShiftRight(ratio, 32, 256);\n  }\n\n  protected tickIndexToSqrtPriceNegative(tickIndex: number) {\n    let tick = Math.abs(tickIndex);\n    let ratio: BN;\n\n    if ((tick & 1) != 0) {\n      ratio = new BN('18445821805675392311');\n    } else {\n      ratio = new BN('18446744073709551616');\n    }\n\n    if ((tick & 2) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18444899583751176498')), 64, 256);\n    }\n    if ((tick & 4) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18443055278223354162')), 64, 256);\n    }\n    if ((tick & 8) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18439367220385604838')), 64, 256);\n    }\n    if ((tick & 16) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18431993317065449817')), 64, 256);\n    }\n    if ((tick & 32) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18417254355718160513')), 64, 256);\n    }\n    if ((tick & 64) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18387811781193591352')), 64, 256);\n    }\n    if ((tick & 128) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18329067761203520168')), 64, 256);\n    }\n    if ((tick & 256) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('18212142134806087854')), 64, 256);\n    }\n    if ((tick & 512) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('17980523815641551639')), 64, 256);\n    }\n    if ((tick & 1024) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('17526086738831147013')), 64, 256);\n    }\n    if ((tick & 2048) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('16651378430235024244')), 64, 256);\n    }\n    if ((tick & 4096) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('15030750278693429944')), 64, 256);\n    }\n    if ((tick & 8192) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('12247334978882834399')), 64, 256);\n    }\n    if ((tick & 16384) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('8131365268884726200')), 64, 256);\n    }\n    if ((tick & 32768) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('3584323654723342297')), 64, 256);\n    }\n    if ((tick & 65536) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('696457651847595233')), 64, 256);\n    }\n    if ((tick & 131072) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('26294789957452057')), 64, 256);\n    }\n    if ((tick & 262144) != 0) {\n      ratio = this.signedShiftRight(ratio.mul(new BN('37481735321082')), 64, 256);\n    }\n\n    return ratio;\n  }\n\n  protected signedShiftLeft(n0: BN, shiftBy: number, bitWidth: number) {\n    let twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\n    twosN0.imaskn(bitWidth + 1);\n    return twosN0.fromTwos(bitWidth);\n  }\n\n  protected signedShiftRight(n0: BN, shiftBy: number, bitWidth: number) {\n    let twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\n    twoN0.imaskn(bitWidth - shiftBy + 1);\n    return twoN0.fromTwos(bitWidth - shiftBy);\n  }\n}\n","import { SUI_CLOCK_OBJECT_ID } from '@mysten/sui/utils';\nimport { Transaction } from '@mysten/sui/transactions';\nimport Decimal from 'decimal.js';\nimport { Contract } from './contract';\nimport { validateObjectResponse } from '../utils/validate-object-response';\nimport { Base } from './base';\nimport BN from 'bn.js';\nimport type { DynamicFieldPage, SuiObjectResponse } from '@mysten/sui/client';\nimport { getObjectFields, getObjectId, getObjectType } from './legacy';\nimport * as suiKit from '../utils/sui-kit';\nimport { deprecatedPoolRewards } from '../utils/deprecated-pool-rewards';\n\nconst ONE_MINUTE = 60 * 1000;\n\nexport declare module Pool {\n  export interface MintParams {\n    /**\n     * Pool ID\n     */\n    pool: string;\n    address: string;\n    amountA: string | number;\n    amountB: string | number;\n    /**\n     * Acceptable wasted amount. Range: `[0, 100)`, unit: `%`\n     */\n    slippage: string | number;\n    deadline?: number;\n    txb?: Transaction;\n  }\n\n  export interface LiquidityParams {\n    tickLower: number;\n    tickUpper: number;\n  }\n\n  export interface CreatePoolOptions extends Omit<MintParams, 'pool'>, LiquidityParams {\n    /**\n     * Fee object from `sdk.contract.getFees()`\n     */\n    fee: Contract.Fee;\n    /**\n     * Coin type such as `0x2::sui::SUI`\n     */\n    coinTypeA: string;\n    coinTypeB: string;\n    sqrtPrice: string;\n  }\n\n  export interface AddLiquidityOptions extends MintParams, LiquidityParams {}\n\n  export interface IncreaseLiquidityOptions extends MintParams {\n    /**\n     * NFT ID\n     */\n    nft: string;\n  }\n\n  export interface DecreaseLiquidityOptions extends MintParams {\n    /**\n     * NFT ID\n     */\n    nft: string;\n    decreaseLiquidity: string | number;\n  }\n\n  export interface RemoveLiquidityOptions\n    extends DecreaseLiquidityOptions,\n      CollectFeeOptions,\n      CollectRewardOptions {}\n\n  export interface CollectFeeOptions\n    extends Pick<Pool.MintParams, 'pool' | 'txb' | 'address' | 'deadline'> {\n    /**\n     * NFT ID\n     */\n    nft: string;\n    collectAmountA: string | number;\n    collectAmountB: string | number;\n  }\n\n  export interface CollectRewardOptions\n    extends Pick<Pool.MintParams, 'pool' | 'txb' | 'address' | 'deadline'> {\n    /**\n     * NFT ID\n     */\n    nft: string;\n    rewardAmounts: (string | number)[];\n  }\n\n  /**\n   * Pool fields from `provider.getObject()` while turning on `showContent` option.\n   */\n  export interface PoolFields {\n    coin_a: string;\n    coin_b: string;\n    deploy_time_ms: string;\n    fee: number;\n    fee_growth_global_a: string;\n    fee_growth_global_b: string;\n    fee_protocol: number;\n    id: { id: string };\n    liquidity: string;\n    max_liquidity_per_tick: string;\n    protocol_fees_a: string;\n    protocol_fees_b: string;\n    reward_infos: {\n      type: string;\n      fields: {\n        emissions_per_second: string;\n        growth_global: string;\n        id: {\n          id: string;\n        };\n        manager: string;\n        vault: string;\n        vault_coin_type: string;\n      };\n    }[];\n    reward_last_updated_time_ms: string;\n    sqrt_price: string;\n    tick_current_index: {\n      type: string;\n      fields: { bits: number };\n    };\n    tick_map: {\n      type: string;\n      fields: {\n        id: { id: string };\n        size: string;\n      };\n    };\n    tick_spacing: number;\n    unlocked: boolean;\n  }\n\n  export type Types = [string, string, string];\n\n  export interface Pool extends PoolFields {\n    objectId: string;\n    type: string;\n    types: Types;\n  }\n}\n\nexport class Pool extends Base {\n  /**\n   * Get Turbos unlocked pools\n   * @param withLocked Defaults `false`\n   */\n  async getPools(withLocked: boolean = false): Promise<Pool.Pool[]> {\n    const contract = await this.contract.getConfig();\n    const poolFactoryIds: string[] = [];\n    let poolFactories!: DynamicFieldPage;\n    do {\n      poolFactories = await this.provider.getDynamicFields({\n        parentId: contract.PoolTableId,\n        cursor: poolFactories?.nextCursor,\n        limit: 15,\n      });\n      poolFactoryIds.push(...poolFactories.data.map((factory) => factory.objectId));\n    } while (poolFactories.hasNextPage);\n\n    if (!poolFactoryIds.length) return [];\n    const poolFactoryInfos = await suiKit.multiGetObjects(this.provider, poolFactoryIds, {\n      showContent: true,\n    });\n    const poolIds = poolFactoryInfos.map((info) => {\n      const fields = getObjectFields(info) as {\n        value: {\n          fields: {\n            pool_id: string;\n            pool_key: string;\n          };\n        };\n      };\n      return fields.value.fields.pool_id;\n    });\n\n    if (!poolIds.length) return [];\n    let pools = await suiKit.multiGetObjects(this.provider, poolIds, {\n      showContent: true,\n    });\n    if (!withLocked) {\n      pools = pools.filter((pool) => {\n        const fields = getObjectFields(pool) as unknown as Pool.PoolFields;\n        return fields.unlocked;\n      });\n    }\n\n    return pools.map((pool) => this.parsePool(pool));\n  }\n\n  async getPool(poolId: string) {\n    return this.getCacheOrSet(\n      `pool-${poolId}`,\n      async () => {\n        const result = await this.provider.getObject({\n          id: poolId,\n          options: { showContent: true },\n        });\n        validateObjectResponse(result, 'pool');\n        return this.parsePool(result);\n      },\n      1500,\n    );\n  }\n\n  async createPool(options: Pool.CreatePoolOptions): Promise<Transaction> {\n    const {\n      fee,\n      address,\n      tickLower,\n      tickUpper,\n      sqrtPrice,\n      slippage,\n      coinTypeA,\n      coinTypeB,\n    } = options;\n    const contract = await this.contract.getConfig();\n    const amountA = new Decimal(options.amountA);\n    const amountB = new Decimal(options.amountB);\n    const [coinIdsA, coinIdsB] = await Promise.all([\n      this.coin.selectTradeCoins(address, coinTypeA, amountA),\n      this.coin.selectTradeCoins(address, coinTypeB, amountB),\n    ]);\n\n    const txb = options.txb || new Transaction();\n    const coinAObjects =\n      coinIdsA.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsA, coinTypeA, amountA)\n        : [this.coin.zero(coinTypeA, txb)];\n    const coinBObjects =\n      coinIdsB.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsB, coinTypeB, amountB)\n        : [this.coin.zero(coinTypeB, txb)];\n\n    txb.moveCall({\n      target: `${contract.PackageId}::pool_factory::deploy_pool_and_mint`,\n      typeArguments: [coinTypeA, coinTypeB, fee.type],\n      arguments: [\n        // pool_config\n        txb.object(contract.PoolConfig),\n        // fee_type?\n        txb.object(fee.objectId),\n        // sqrt_price\n        txb.pure.u128(sqrtPrice),\n        // positions\n        txb.object(contract.Positions),\n        // coins\n        txb.makeMoveVec({\n          elements: coinAObjects,\n        }),\n        txb.makeMoveVec({\n          elements: coinBObjects,\n        }),\n        // tick_lower_index\n        txb.pure.u32(Number(Math.abs(tickLower).toFixed(0))),\n        txb.pure.bool(tickLower < 0),\n        // tick_upper_index\n        txb.pure.u32(Number(Math.abs(tickUpper).toFixed(0))),\n        txb.pure.bool(tickUpper < 0),\n        // amount_desired\n        txb.pure.u64(amountA.toFixed(0)),\n        txb.pure.u64(amountB.toFixed(0)),\n        // amount_min\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountA, slippage)),\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountB, slippage)),\n        // recipient\n        txb.pure.address(address),\n        // deadline\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE)),\n        // clock\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    return txb;\n  }\n\n  async addLiquidity(options: Pool.AddLiquidityOptions): Promise<Transaction> {\n    const { address, tickLower, tickUpper, slippage, pool } = options;\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.getPoolTypeArguments(pool);\n    const [coinTypeA, coinTypeB] = typeArguments;\n    const [coinA, coinB] = await Promise.all([\n      this.coin.getMetadata(coinTypeA),\n      this.coin.getMetadata(coinTypeB),\n    ]);\n    if (!coinA || !coinB) throw new Error('Invalid coin type');\n    const amountA = new Decimal(options.amountA);\n    const amountB = new Decimal(options.amountB);\n    const [coinIdsA, coinIdsB] = await Promise.all([\n      this.coin.selectTradeCoins(address, coinTypeA, amountA),\n      this.coin.selectTradeCoins(address, coinTypeB, amountB),\n    ]);\n\n    const txb = options.txb || new Transaction();\n\n    const coinAObjects =\n      coinIdsA.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsA, coinTypeA, amountA)\n        : [this.coin.zero(coinTypeA, txb)];\n    const coinBObjects =\n      coinIdsB.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsB, coinTypeB, amountB)\n        : [this.coin.zero(coinTypeB, txb)];\n\n    txb.moveCall({\n      target: `${contract.PackageId}::position_manager::mint`,\n      typeArguments: typeArguments,\n      arguments: [\n        // pool\n        txb.object(pool),\n        // positions\n        txb.object(contract.Positions),\n        // coins\n        txb.makeMoveVec({\n          elements: coinAObjects,\n        }),\n        txb.makeMoveVec({\n          elements: coinBObjects,\n        }),\n        // tick_lower_index\n        txb.pure.u32(Number(Math.abs(tickLower).toFixed(0))),\n        txb.pure.bool(tickLower < 0),\n        // tick_upper_index\n        txb.pure.u32(Number(Math.abs(tickUpper).toFixed(0))),\n        txb.pure.bool(tickUpper < 0),\n        // amount_desired\n        txb.pure.u64(amountA.toFixed(0)),\n        txb.pure.u64(amountB.toFixed(0)),\n        // amount_min\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountA, slippage)),\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountB, slippage)),\n        // recipient\n        txb.pure.address(address),\n        // deadline\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE)),\n        // clock\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    return txb;\n  }\n\n  async increaseLiquidity(options: Pool.IncreaseLiquidityOptions): Promise<Transaction> {\n    const { pool, slippage, address, nft } = options;\n    const contract = await this.contract.getConfig();\n    const amountA = new Decimal(options.amountA);\n    const amountB = new Decimal(options.amountB);\n    const typeArguments = await this.getPoolTypeArguments(pool);\n    const [coinTypeA, coinTypeB] = typeArguments;\n    const [coinIdsA, coinIdsB] = await Promise.all([\n      this.coin.selectTradeCoins(address, coinTypeA, amountA),\n      this.coin.selectTradeCoins(address, coinTypeB, amountB),\n    ]);\n\n    const txb = options.txb || new Transaction();\n    const coinAObjects =\n      coinIdsA.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsA, coinTypeA, amountA)\n        : [this.coin.zero(coinTypeA, txb)];\n    const coinBObjects =\n      coinIdsB.length > 0\n        ? this.coin.convertTradeCoins(txb, coinIdsB, coinTypeB, amountB)\n        : [this.coin.zero(coinTypeB, txb)];\n\n    txb.moveCall({\n      target: `${contract.PackageId}::position_manager::increase_liquidity`,\n      typeArguments: typeArguments,\n      arguments: [\n        // pool\n        txb.object(pool),\n        // positions\n        txb.object(contract.Positions),\n        // coins\n        txb.makeMoveVec({\n          elements: coinAObjects,\n        }),\n        txb.makeMoveVec({\n          elements: coinBObjects,\n        }),\n        // nft\n        txb.object(nft),\n        // amount_desired\n        txb.pure.u64(amountA.toFixed(0)),\n        txb.pure.u64(amountB.toFixed(0)),\n        // amount_min\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountA, slippage)),\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountB, slippage)),\n        // deadline\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        // clock\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n    });\n    return txb;\n  }\n\n  async decreaseLiquidity(options: Pool.DecreaseLiquidityOptions): Promise<Transaction> {\n    const { slippage, nft, pool, decreaseLiquidity } = options;\n    const amountA = new Decimal(options.amountA);\n    const amountB = new Decimal(options.amountB);\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.getPoolTypeArguments(pool);\n\n    const txb = options.txb || new Transaction();\n    txb.moveCall({\n      target: `${contract.PackageId}::position_manager::decrease_liquidity`,\n      typeArguments: typeArguments,\n      arguments: [\n        // pool\n        txb.object(pool),\n        // positions\n        txb.object(contract.Positions),\n        // nft\n        txb.object(nft),\n        // liquidity\n        txb.pure.u128(new BN(decreaseLiquidity).toString()),\n        // amount_min\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountA, slippage)),\n        txb.pure.u64(this.getMinimumAmountBySlippage(amountB, slippage)),\n        // deadline\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        // clock\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n    });\n    return txb;\n  }\n\n  async removeLiquidity(options: Pool.RemoveLiquidityOptions): Promise<Transaction> {\n    let txb = await this.decreaseLiquidity(options);\n    txb = await this.collectFee({ txb, ...options });\n    txb = await this.collectReward({ txb, ...options });\n    txb = await this.nft.burn({ txb, nft: options.nft, pool: options.pool });\n\n    return txb;\n  }\n\n  async collectFee(options: Pool.CollectFeeOptions): Promise<Transaction> {\n    const {\n      pool,\n      nft,\n      address,\n      collectAmountA: amountAMax,\n      collectAmountB: amountBMax,\n    } = options;\n    const txb = options.txb || new Transaction();\n\n    if (Number(amountAMax) === 0 && Number(amountBMax) === 0) {\n      return txb;\n    }\n\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.getPoolTypeArguments(pool);\n\n    txb.moveCall({\n      target: `${contract.PackageId}::position_manager::collect`,\n      typeArguments: typeArguments,\n      arguments: [\n        txb.object(pool),\n        txb.object(contract.Positions),\n        txb.object(nft),\n        // amount_a_max\n        txb.pure.u64(amountAMax),\n        // amount_a_max\n        txb.pure.u64(amountBMax),\n        //recipient\n        txb.pure.address(address),\n        // deadline\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        // clock\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    return txb;\n  }\n\n  async collectReward(options: Pool.CollectRewardOptions): Promise<Transaction> {\n    const { pool: poolId, nft, rewardAmounts, address } = options;\n    const txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.getPoolTypeArguments(poolId);\n    const pool = await this.getPool(poolId);\n\n    pool.reward_infos.forEach((rewardInfo, index) => {\n      if (\n        rewardAmounts[index] !== '0' &&\n        rewardAmounts[index] !== 0 &&\n        !deprecatedPoolRewards(pool.id.id, index)\n      ) {\n        txb.moveCall({\n          target: `${contract.PackageId}::position_manager::collect_reward`,\n          typeArguments: [...typeArguments, rewardInfo.fields.vault_coin_type],\n          arguments: [\n            txb.object(poolId),\n            txb.object(contract.Positions),\n            txb.object(nft),\n            txb.object(rewardInfo.fields.vault),\n            txb.pure.u64(index),\n            txb.pure.u64(Number(rewardAmounts[index])),\n            txb.pure.address(address),\n            txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n            txb.object(SUI_CLOCK_OBJECT_ID),\n            txb.object(contract.Versioned),\n          ],\n        });\n      }\n    });\n\n    return txb;\n  }\n\n  public getTokenAmountsFromLiquidity(options: {\n    currentSqrtPrice: BN;\n    lowerSqrtPrice: BN;\n    upperSqrtPrice: BN;\n    /**\n     * Defaults `BN(100_000_000)`\n     */\n    liquidity?: BN;\n    /**\n     * Defaults `true`\n     */\n    ceil?: boolean;\n  }): [a: BN, b: BN] {\n    const liquidity = new Decimal((options.liquidity || new BN(100_000_000)).toString());\n    const currentPrice = new Decimal(options.currentSqrtPrice.toString());\n    const lowerPrice = new Decimal(options.lowerSqrtPrice.toString());\n    const upperPrice = new Decimal(options.upperSqrtPrice.toString());\n    let amountA: Decimal, amountB: Decimal;\n\n    if (options.currentSqrtPrice.lt(options.lowerSqrtPrice)) {\n      // x = L * (pb - pa) / (pa * pb)\n      amountA = this.math\n        .toX64_Decimal(liquidity)\n        .mul(upperPrice.sub(lowerPrice))\n        .div(lowerPrice.mul(upperPrice));\n      amountB = new Decimal(0);\n    } else if (options.currentSqrtPrice.lt(options.upperSqrtPrice)) {\n      // x = L * (pb - p) / (p * pb)\n      // y = L * (p - pa)\n      amountA = this.math\n        .toX64_Decimal(liquidity)\n        .mul(upperPrice.sub(currentPrice))\n        .div(currentPrice.mul(upperPrice));\n      amountB = this.math.fromX64_Decimal(liquidity.mul(currentPrice.sub(lowerPrice)));\n    } else {\n      // y = L * (pb - pa)\n      amountA = new Decimal(0);\n      amountB = this.math.fromX64_Decimal(liquidity.mul(upperPrice.sub(lowerPrice)));\n    }\n\n    const methodName = options.ceil !== false ? 'ceil' : 'floor';\n    return [\n      new BN(amountA[methodName]().toString()),\n      new BN(amountB[methodName]().toString()),\n    ];\n  }\n\n  async getPoolTypeArguments(poolId: string): Promise<Pool.Types> {\n    return this.getCacheOrSet('pool-type-' + poolId, async () => {\n      const result = await this.getPool(poolId);\n      return result.types;\n    });\n  }\n\n  parsePoolType(type: string, length: 2): [string, string];\n  parsePoolType(type: string, length: 3): Pool.Types;\n  parsePoolType(type: string): string[];\n  parsePoolType(type: string, length?: number): string[] {\n    const types = type.replace('>', '').split('<')[1]?.split(/,\\s*/) || [];\n\n    if (length !== undefined && length !== types.length) {\n      throw new Error('Invalid pool type');\n    }\n\n    return types;\n  }\n\n  /**\n   * Calculate liquidity by given amount and price.\n   * It's useful for increase liquidity or creating pool which includes increase liquidity.\n   */\n  async getFixedLiquidity(options: {\n    coinTypeA: string;\n    coinTypeB: string;\n    amountA: string | number;\n    amountB: string | number;\n    priceA: string | number | undefined;\n    priceB: string | number | undefined;\n  }) {\n    const { coinTypeA, coinTypeB, amountA, amountB } = options;\n    const [coinA, coinB] = await Promise.all([\n      this.coin.getMetadata(coinTypeA),\n      this.coin.getMetadata(coinTypeB),\n    ]);\n\n    const liquidityA = new Decimal(this.math.scaleDown(amountA, coinA.decimals)).mul(\n      options.priceA ?? 1,\n    );\n    const liquidityB = new Decimal(this.math.scaleDown(amountB, coinB.decimals)).mul(\n      options.priceB ?? 1,\n    );\n    return {\n      liquidityA: liquidityA.toString(),\n      liquidityB: liquidityB.toString(),\n      liquidity: liquidityA.plus(liquidityB).toString(),\n    };\n  }\n\n  protected parsePool(pool: SuiObjectResponse): Pool.Pool {\n    const fields = getObjectFields(pool) as unknown as Pool.PoolFields;\n    const objectId = getObjectId(pool);\n    const type = getObjectType(pool)!;\n    const types = this.parsePoolType(type, 3);\n    this.getCacheOrSet('pool-type-' + objectId, async () => types);\n\n    return {\n      ...fields,\n      objectId,\n      type,\n      types,\n    };\n  }\n\n  protected getMinimumAmountBySlippage(\n    amount: Decimal.Value,\n    slippage: Decimal.Value,\n  ): string {\n    const origin = new Decimal(amount);\n    const ratio = new Decimal(1).minus(new Decimal(slippage).div(100));\n    if (ratio.lte(0) || ratio.gt(1)) {\n      throw new Error('invalid slippage range');\n    }\n    return origin.mul(ratio).toFixed(0);\n  }\n}\n","import type { SuiObjectResponse } from '@mysten/sui/client';\nimport {\n  getObjectDeletedResponse,\n  getObjectId,\n  getObjectNotExistsResponse,\n} from '../lib/legacy';\n\nexport const validateObjectResponse = (\n  obj: SuiObjectResponse,\n  key: string,\n): obj is { data: NonNullable<SuiObjectResponse['data']> } => {\n  const objectId = getObjectId(obj);\n\n  if (getObjectDeletedResponse(obj)) {\n    throw new Error(`${key}(${objectId}) had been deleted`);\n  }\n\n  if (getObjectNotExistsResponse(obj)) {\n    throw new Error(`${key}(${objectId}) is not found`);\n  }\n\n  return true;\n};\n","/**\n * deprecated pool rewards position index\n */\n\nconst deprecatedPools: { [x: string]: number[] } = {\n  '0x839595a83dbb6b076a0fddad42dd512b66c065aa7ef3d298daa00a327d53ab31': [0],\n  '0x6a3be30a31f88d9055da7f26f53dd34c85bc5aab9028212361ccf67f5f00fd46': [0],\n};\n\nexport const deprecatedPoolRewards = (pool: string, index: number) => {\n  if (deprecatedPools[pool]) {\n    return deprecatedPools[pool]!.includes(index);\n  }\n  return false;\n};\n\nexport const isDeprecatedPool = (pool: string): boolean => {\n  return !!deprecatedPools[pool];\n};\n","import { Transaction } from '@mysten/sui/transactions';\nimport { validateObjectResponse } from '../utils/validate-object-response';\nimport { Base } from './base';\nimport BN from 'bn.js';\nimport { getObjectFields, getObjectOwner } from './legacy';\nimport type { SuiObjectResponse } from '@mysten/sui/client';\nimport Decimal from 'decimal.js';\nimport { collectFeesQuote } from '../utils/collect-fees-quote';\nimport { collectRewardsQuote } from '../utils/collect-rewards-quote';\nimport type { Pool } from './pool';\n\nexport declare module NFT {\n  export interface NftField {\n    description: string;\n    id: { id: string };\n    img_url: string;\n    name: string;\n    pool_id: string;\n    position_id: string;\n  }\n\n  export interface PositionField {\n    fee_growth_inside_a: string;\n    fee_growth_inside_b: string;\n    id: { id: string };\n    liquidity: string;\n    reward_infos: {\n      type: string;\n      fields: {\n        amount_owed: string;\n        reward_growth_inside: string;\n      };\n    }[];\n    tick_lower_index: {\n      type: string;\n      fields: { bits: number };\n    };\n    tick_upper_index: {\n      type: string;\n      fields: { bits: number };\n    };\n    tokens_owed_a: string;\n    tokens_owed_b: string;\n  }\n\n  export interface PositionTickField {\n    id: { id: string };\n    name: { type: string; fields: { bits: number } };\n    value: {\n      type: string;\n      fields: {\n        fee_growth_outside_a: string;\n        fee_growth_outside_b: string;\n        id: { id: string };\n        initialized: boolean;\n        liquidity_gross: string;\n        liquidity_net: {\n          fields: {\n            bits: string;\n          };\n          type: string;\n        };\n        reward_growths_outside: [string, string, string];\n      };\n    };\n  }\n\n  export interface PositionTick {\n    tickIndex: number;\n    initialized: boolean;\n    liquidityNet: BN;\n    liquidityGross: BN;\n    feeGrowthOutsideA: BN;\n    feeGrowthOutsideB: BN;\n    rewardGrowthsOutside: [BN, BN, BN];\n  }\n\n  export interface BurnOptions {\n    pool: string;\n    nft: string;\n    txb?: Transaction;\n  }\n}\n\nexport class NFT extends Base {\n  async getOwner(nftId: string) {\n    const result = await this.getObject(nftId);\n    const owner = getObjectOwner(result);\n    if (!owner || typeof owner === 'string') return void 0;\n    if ('ObjectOwner' in owner) return owner.ObjectOwner;\n    if ('AddressOwner' in owner) return owner.AddressOwner;\n    return void 0;\n  }\n\n  async getFields(nftId: string): Promise<NFT.NftField> {\n    const result = await this.getObject(nftId);\n    return getObjectFields(result) as unknown as NFT.NftField;\n  }\n\n  async getPositionFields(nftId: string): Promise<NFT.PositionField> {\n    const contract = await this.contract.getConfig();\n    const result = await this.provider.getDynamicFieldObject({\n      parentId: contract.Positions,\n      name: { type: 'address', value: nftId },\n    });\n    return getObjectFields(result) as unknown as NFT.PositionField;\n  }\n\n  async getPositionFieldsByPositionId(positionId: string): Promise<NFT.PositionField> {\n    const result = await this.provider.getObject({\n      id: positionId,\n      options: { showContent: true },\n    });\n    validateObjectResponse(result, 'position');\n    return getObjectFields(result) as unknown as NFT.PositionField;\n  }\n\n  async getPositionTick(\n    pool: string,\n    tickIndex:\n      | NFT.PositionField['tick_lower_index']\n      | NFT.PositionField['tick_upper_index'],\n  ): Promise<NFT.PositionTick | undefined> {\n    const response = await this.provider.getDynamicFieldObject({\n      parentId: pool,\n      name: {\n        type: tickIndex.type,\n        value: tickIndex.fields,\n      },\n    });\n    const fields = getObjectFields(response) as undefined | NFT.PositionTickField;\n    if (!fields) return;\n\n    return {\n      tickIndex: this.math.bitsToNumber(fields.name.fields.bits),\n      initialized: fields.value.fields.initialized,\n      liquidityNet: new BN(\n        this.math\n          .bitsToNumber(fields.value.fields.liquidity_net.fields.bits, 128)\n          .toString(),\n      ),\n      liquidityGross: new BN(fields.value.fields.liquidity_gross),\n      feeGrowthOutsideA: new BN(fields.value.fields.fee_growth_outside_a),\n      feeGrowthOutsideB: new BN(fields.value.fields.fee_growth_outside_b),\n      rewardGrowthsOutside: fields.value.fields.reward_growths_outside.map(\n        (val) => new BN(val),\n      ) as [BN, BN, BN],\n    };\n  }\n\n  async getPositionAPR(opts: {\n    poolId: string;\n    tickLower: number;\n    tickUpper: number;\n    fees24h: string | number;\n    getPrice(coinType: string): Promise<string | number | undefined>;\n  }): Promise<{ fees: string; total: string; rewards: string }> {\n    const { poolId, getPrice, fees24h, tickLower, tickUpper } = opts;\n    const pool = await this.pool.getPool(poolId);\n    const tickCurrent = this.math.bitsToNumber(pool.tick_current_index.fields.bits);\n    const [coinA, coinB, priceA, priceB] = await Promise.all([\n      this.coin.getMetadata(pool.types[0]),\n      this.coin.getMetadata(pool.types[1]),\n      getPrice(pool.types[0]),\n      getPrice(pool.types[1]),\n    ]);\n\n    if (\n      !priceA ||\n      !priceB ||\n      tickLower >= tickUpper ||\n      tickCurrent < tickLower ||\n      tickCurrent >= tickUpper\n    ) {\n      return { fees: '0', rewards: '0', total: '0' };\n    }\n\n    const { minTokenA, minTokenB } = this.getRemoveLiquidityQuote(\n      pool,\n      tickLower,\n      tickUpper,\n    );\n    const tokenValueA = new Decimal(\n      this.math.scaleDown(minTokenA.toString(), coinA.decimals),\n    ).mul(priceA);\n    const tokenValueB = new Decimal(\n      this.math.scaleDown(minTokenB.toString(), coinB.decimals),\n    ).mul(priceB);\n    const concentratedValue = tokenValueA.add(tokenValueB);\n\n    const feeApr = concentratedValue.isZero()\n      ? new Decimal(0)\n      : new Decimal(fees24h).mul(365).div(concentratedValue).mul(100);\n    let totalRewardApr = new Decimal(0);\n\n    await Promise.all(\n      pool.reward_infos.map(async (reward) => {\n        const { emissions_per_second } = reward.fields;\n        const coinType = this.coin.formatCoinType(reward.fields.vault_coin_type);\n        const [price, coin] = await Promise.all([\n          getPrice(coinType),\n          this.coin.getMetadata(coinType),\n        ]);\n        if (!emissions_per_second || emissions_per_second === '0' || !price) return;\n\n        totalRewardApr = totalRewardApr.add(\n          new Decimal(new BN(emissions_per_second).shrn(64).toString())\n            .div(10 ** coin.decimals)\n            .mul(31_536_000 /* seconds per year */)\n            .mul(price)\n            .div(concentratedValue)\n            .mul(100),\n        );\n      }),\n    );\n\n    return {\n      fees: feeApr.toString(),\n      rewards: totalRewardApr.toString(),\n      total: feeApr.plus(totalRewardApr).toString(),\n    };\n  }\n\n  protected getRemoveLiquidityQuote(\n    pool: Pool.PoolFields,\n    tickLower: number,\n    tickUpper: number,\n  ): { minTokenA: BN; minTokenB: BN } {\n    const ZERO = new BN(0);\n    const liquidity = new BN(pool.liquidity);\n    const tickCurrent = this.math.bitsToNumber(pool.tick_current_index.fields.bits);\n    const sqrtPriceLowerX64 = this.math.tickIndexToSqrtPriceX64(tickLower);\n    const sqrtPriceUpperX64 = this.math.tickIndexToSqrtPriceX64(tickUpper);\n\n    if (tickCurrent < tickLower) {\n      const estTokenA = this.getTokenAFromLiquidity(\n        liquidity,\n        sqrtPriceLowerX64,\n        sqrtPriceUpperX64,\n      );\n      return { minTokenA: this.adjustForSlippage(estTokenA), minTokenB: ZERO };\n    }\n\n    if (tickCurrent < tickUpper) {\n      const sqrtPriceX64 = new BN(pool.sqrt_price);\n      const estTokenA = this.getTokenAFromLiquidity(\n        liquidity,\n        sqrtPriceX64,\n        sqrtPriceUpperX64,\n      );\n      const estTokenB = this.getTokenBFromLiquidity(\n        liquidity,\n        sqrtPriceLowerX64,\n        sqrtPriceX64,\n      );\n      return {\n        minTokenA: this.adjustForSlippage(estTokenA),\n        minTokenB: this.adjustForSlippage(estTokenB),\n      };\n    }\n\n    const estTokenB = this.getTokenBFromLiquidity(\n      liquidity,\n      sqrtPriceLowerX64,\n      sqrtPriceUpperX64,\n    );\n    return { minTokenA: ZERO, minTokenB: this.adjustForSlippage(estTokenB) };\n  }\n\n  protected adjustForSlippage(n: BN): BN {\n    const slippageTolerance = {\n      numerator: new BN(0),\n      denominator: new BN(1000),\n    };\n    return n\n      .mul(slippageTolerance.denominator)\n      .div(slippageTolerance.denominator.add(slippageTolerance.numerator));\n  }\n\n  protected getTokenAFromLiquidity(\n    liquidity: BN,\n    sqrtPriceLowerX64: BN,\n    sqrtPriceUpperX64: BN,\n  ) {\n    const numerator = liquidity.mul(sqrtPriceUpperX64.sub(sqrtPriceLowerX64)).shln(64);\n    const denominator = sqrtPriceUpperX64.mul(sqrtPriceLowerX64);\n    return numerator.div(denominator);\n  }\n\n  protected getTokenBFromLiquidity(\n    liquidity: BN,\n    sqrtPriceLowerX64: BN,\n    sqrtPriceUpperX64: BN,\n  ) {\n    return liquidity.mul(sqrtPriceUpperX64.sub(sqrtPriceLowerX64)).shrn(64);\n  }\n\n  async burn(options: NFT.BurnOptions): Promise<Transaction> {\n    const { pool, nft } = options;\n    const txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(pool);\n\n    txb.moveCall({\n      target: `${contract.PackageId}::position_manager::burn`,\n      typeArguments: typeArguments,\n      arguments: [\n        txb.object(contract.Positions),\n        txb.object(nft),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    return txb;\n  }\n\n  async getPositionLiquidityUSD(options: {\n    poolId: string;\n    position: NFT.PositionField;\n    priceA: string | number | undefined;\n    priceB: string | number | undefined;\n  }) {\n    const { position, poolId, priceA, priceB } = options;\n    const pool = await this.pool.getPool(poolId);\n    const amount = this.pool.getTokenAmountsFromLiquidity({\n      currentSqrtPrice: new BN(pool.sqrt_price),\n      lowerSqrtPrice: this.math.tickIndexToSqrtPriceX64(\n        this.math.bitsToNumber(position.tick_lower_index.fields.bits),\n      ),\n      upperSqrtPrice: this.math.tickIndexToSqrtPriceX64(\n        this.math.bitsToNumber(position.tick_upper_index.fields.bits),\n      ),\n      liquidity: new BN(\n        position.liquidity === undefined ? 100_000_000 : position.liquidity,\n      ),\n    });\n\n    const [coin_a, coin_b] = await Promise.all([\n      this.coin.getMetadata(pool.types[0]),\n      this.coin.getMetadata(pool.types[1]),\n    ]);\n\n    const liquidityAUsd = new Decimal(amount[0].toString())\n      .div(10 ** coin_a.decimals)\n      .mul(priceA || 0);\n    const liquidityBUsd = new Decimal(amount[1].toString())\n      .div(10 ** coin_b.decimals)\n      .mul(priceB || 0);\n    return liquidityAUsd.plus(liquidityBUsd).toString();\n  }\n\n  async getUnclaimedFeesAndRewards(options: {\n    poolId: string;\n    position: NFT.PositionField;\n    getPrice(coinType: string): Promise<string | number | undefined>;\n  }) {\n    const { position, poolId } = options;\n    const [pool, tickLowerDetail, tickUpperDetail] = await Promise.all([\n      this.pool.getPool(poolId),\n      this.nft.getPositionTick(poolId, position.tick_lower_index),\n      this.nft.getPositionTick(poolId, position.tick_upper_index),\n    ]);\n    const opts = {\n      ...options,\n      pool,\n      tickLowerDetail: tickLowerDetail!,\n      tickUpperDetail: tickUpperDetail!,\n    };\n    const [fees, rewards] = await Promise.all([\n      this.getUnclaimedFees(opts),\n      this.getUnclaimedRewards(opts),\n    ]);\n\n    const { unclaimedFees, ...restFees } = fees;\n    const { unclaimedRewards, ...restRewards } = rewards;\n\n    return {\n      fees: fees.unclaimedFees.toString(),\n      rewards: unclaimedRewards.toString(),\n      total: unclaimedFees.plus(unclaimedRewards).toString(),\n      fields: {\n        ...restFees,\n        ...restRewards,\n      },\n    };\n  }\n\n  protected async getUnclaimedFees(options: {\n    pool: Pool.Pool;\n    position: NFT.PositionField;\n    getPrice(coinType: string): Promise<string | number | undefined>;\n    tickLowerDetail: NFT.PositionTick;\n    tickUpperDetail: NFT.PositionTick;\n  }) {\n    const { position, pool, getPrice, tickLowerDetail, tickUpperDetail } = options;\n    const [coinA, coinB, priceA, priceB] = await Promise.all([\n      this.coin.getMetadata(pool.types[0]),\n      this.coin.getMetadata(pool.types[1]),\n      getPrice(pool.types[0]),\n      getPrice(pool.types[1]),\n    ]);\n    const collectFees = collectFeesQuote(this.math, {\n      pool,\n      position,\n      tickLowerDetail: tickLowerDetail!,\n      tickUpperDetail: tickUpperDetail!,\n    });\n    let scaledFeeOwedA = this.math.scaleDown(collectFees.feeOwedA, coinA.decimals);\n    let scaledFeeOwedB = this.math.scaleDown(collectFees.feeOwedB, coinB.decimals);\n\n    // function isTooLarge(value: string, decimals: number) {\n    //   const max = new Decimal(1_000_000).mul(Decimal.pow(10, decimals));\n    //   return max.lt(value);\n    // }\n\n    // if (isTooLarge(scaledFeeOwedA, coinA.decimals)) {\n    //   scaledFeeOwedA = '0';\n    //   collectFees.feeOwedA = '0';\n    // }\n    // if (isTooLarge(scaledFeeOwedB, coinB.decimals)) {\n    //   scaledFeeOwedB = '0';\n    //   collectFees.feeOwedB = '0';\n    // }\n\n    const unclaimedFeeA =\n      priceA === void 0 ? new Decimal(0) : new Decimal(priceA).mul(scaledFeeOwedA);\n    const unclaimedFeeB =\n      priceB === void 0 ? new Decimal(0) : new Decimal(priceB).mul(scaledFeeOwedB);\n\n    return {\n      unclaimedFees: unclaimedFeeA.plus(unclaimedFeeB),\n      scaledFeeOwedA,\n      scaledFeeOwedB,\n      ...collectFees,\n    };\n  }\n\n  protected async getUnclaimedRewards(options: {\n    pool: Pool.Pool;\n    position: NFT.PositionField;\n    getPrice(coinType: string): Promise<string | number | undefined>;\n    tickLowerDetail: NFT.PositionTick;\n    tickUpperDetail: NFT.PositionTick;\n  }) {\n    const { position, pool, getPrice, tickLowerDetail, tickUpperDetail } = options;\n\n    const collectRewards = collectRewardsQuote(this.math, {\n      pool,\n      position,\n      tickLowerDetail: tickLowerDetail!,\n      tickUpperDetail: tickUpperDetail!,\n    });\n    const scaledCollectRewards = [...collectRewards] as typeof collectRewards;\n    const coinTypes = pool.reward_infos.map((reward) =>\n      this.coin.formatCoinType(reward.fields.vault_coin_type),\n    );\n    const coins = await Promise.all([\n      ...pool.reward_infos.map((_, index) => {\n        return this.coin.getMetadata(coinTypes[index]!);\n      }),\n    ]);\n    const prices = await Promise.all(\n      pool.reward_infos.map((_, index) => {\n        return getPrice(coinTypes[index]!);\n      }),\n    );\n    coins.forEach((coin, index) => {\n      scaledCollectRewards[index] = this.math.scaleDown(\n        scaledCollectRewards[index]!,\n        coin.decimals,\n      );\n    });\n    let unclaimedRewards = new Decimal(0);\n    pool.reward_infos.some((_, index) => {\n      const price = prices[index];\n      if (price) {\n        unclaimedRewards = unclaimedRewards.plus(\n          new Decimal(price).mul(scaledCollectRewards[index]!),\n        );\n        return false;\n      } else {\n        unclaimedRewards = unclaimedRewards.plus(1);\n        return true;\n      }\n    });\n\n    return {\n      unclaimedRewards,\n      collectRewards,\n      scaledCollectRewards,\n    };\n  }\n\n  protected getObject(nftId: string): Promise<SuiObjectResponse> {\n    return this.getCacheOrSet('nft-object-' + nftId, async () => {\n      const result = await this.provider.getObject({\n        id: nftId,\n        options: { showContent: true, showOwner: true },\n      });\n      validateObjectResponse(result, 'nft');\n      return result;\n    });\n  }\n}\n","import type { MathUtil, NFT, Pool } from '../lib';\nimport BN from 'bn.js';\n\nexport const collectFeesQuote = (\n  math: MathUtil,\n  options: {\n    pool: Pick<\n      Pool.Pool,\n      'fee_growth_global_a' | 'fee_growth_global_b' | 'tick_current_index'\n    >;\n    position: NFT.PositionField;\n    tickLowerDetail: NFT.PositionTick;\n    tickUpperDetail: NFT.PositionTick;\n  },\n) => {\n  const { pool, position, tickLowerDetail, tickUpperDetail } = options;\n  const feeGrowthGlobalA = new BN(pool.fee_growth_global_a);\n  const feeGrowthInsideA = new BN(position.fee_growth_inside_a);\n  const tokensOwnedA = new BN(position.tokens_owed_a);\n  const feeGrowthGlobalB = new BN(pool.fee_growth_global_b);\n  const feeGrowthInsideB = new BN(position.fee_growth_inside_b);\n  const tokensOwnedB = new BN(position.tokens_owed_b);\n  const liquidity = new BN(position.liquidity);\n\n  let feeGrowthBelowA: BN, feeGrowthBelowB: BN, feeGrowthAboveA: BN, feeGrowthAboveB: BN;\n\n  const currentTick = math.bitsToNumber(pool.tick_current_index.fields.bits);\n  const lowerTick = math.bitsToNumber(position.tick_lower_index.fields.bits);\n  const upperTick = math.bitsToNumber(position.tick_upper_index.fields.bits);\n\n  if (currentTick < lowerTick) {\n    feeGrowthBelowA = math.subUnderflowU128(\n      feeGrowthGlobalA,\n      tickLowerDetail.feeGrowthOutsideA,\n    );\n    feeGrowthBelowB = math.subUnderflowU128(\n      feeGrowthGlobalB,\n      tickLowerDetail.feeGrowthOutsideB,\n    );\n  } else {\n    feeGrowthBelowA = tickLowerDetail.feeGrowthOutsideA;\n    feeGrowthBelowB = tickLowerDetail.feeGrowthOutsideB;\n  }\n\n  if (currentTick < upperTick) {\n    feeGrowthAboveA = tickUpperDetail.feeGrowthOutsideA;\n    feeGrowthAboveB = tickUpperDetail.feeGrowthOutsideB;\n  } else {\n    feeGrowthAboveA = math.subUnderflowU128(\n      feeGrowthGlobalA,\n      tickUpperDetail.feeGrowthOutsideA,\n    );\n    feeGrowthAboveB = math.subUnderflowU128(\n      feeGrowthGlobalB,\n      tickUpperDetail.feeGrowthOutsideB,\n    );\n  }\n\n  const feeGrowthInsideAX64 = math.subUnderflowU128(\n    math.subUnderflowU128(feeGrowthGlobalA, feeGrowthBelowA),\n    feeGrowthAboveA,\n  );\n  const feeGrowthInsideBX64 = math.subUnderflowU128(\n    math.subUnderflowU128(feeGrowthGlobalB, feeGrowthBelowB),\n    feeGrowthAboveB,\n  );\n\n  const feeOwedADelta = math\n    .subUnderflowU128(feeGrowthInsideAX64, feeGrowthInsideA)\n    .mul(liquidity)\n    .shrn(64);\n  const feeOwedBDelta = math\n    .subUnderflowU128(feeGrowthInsideBX64, feeGrowthInsideB)\n    .mul(liquidity)\n    .shrn(64);\n\n  return {\n    feeOwedA: tokensOwnedA.add(feeOwedADelta).toString(),\n    feeOwedB: tokensOwnedB.add(feeOwedBDelta).toString(),\n  };\n};\n","import type { MathUtil, NFT, Pool } from '../lib';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport { bitMath } from './bit-math';\nimport { deprecatedPoolRewards } from './deprecated-pool-rewards';\n\nexport const collectRewardsQuote = (\n  math: MathUtil,\n  options: {\n    pool: Pick<\n      Pool.Pool,\n      | 'reward_last_updated_time_ms'\n      | 'reward_infos'\n      | 'tick_current_index'\n      | 'liquidity'\n      | 'id'\n    >;\n    position: NFT.PositionField;\n    tickLowerDetail: NFT.PositionTick;\n    tickUpperDetail: NFT.PositionTick;\n    timeStampInSeconds?: BN;\n  },\n) => {\n  const { pool, position, tickLowerDetail, tickUpperDetail, timeStampInSeconds } =\n    options;\n  const rewardLastUpdatedTimestamp = new BN(\n    new Decimal(pool.reward_last_updated_time_ms).div(1000).toFixed(0),\n  );\n  const currTimestampInSeconds =\n    timeStampInSeconds ?? new BN(Date.now()).div(new BN(1000));\n  const timestampDelta = currTimestampInSeconds.sub(new BN(rewardLastUpdatedTimestamp));\n  // @ts-expect-error\n  const rewardOwed: [string, string, string] = [];\n  const poolLiquidity = new BN(pool.liquidity);\n  const positionLiquidity = new BN(position.liquidity);\n\n  for (let i = 0; i < 3; ++i) {\n    // Calculate the reward growth on the outside of the position (growth_above, growth_below)\n    const poolRewardInfo = pool.reward_infos[i];\n    const rewardInfo = {\n      emissionsPerSecondX64: new BN(\n        poolRewardInfo ? poolRewardInfo.fields.emissions_per_second : '0',\n      ),\n      growthGlobalX64: new BN(poolRewardInfo ? poolRewardInfo.fields.growth_global : '0'),\n    };\n    const positionRewardInfo = {\n      growthInsideCheckpoint: new BN(\n        position.reward_infos[i]?.fields.reward_growth_inside ?? '0',\n      ),\n      amountOwed: new BN(position.reward_infos[i]?.fields.amount_owed ?? '0'),\n    };\n\n    // Increment the global reward growth tracker based on time elasped since the last whirlpool update.\n    let adjustedRewardGrowthGlobalX64 = rewardInfo.growthGlobalX64;\n    if (!poolLiquidity.isZero()) {\n      const rewardGrowthDelta = bitMath.mulDiv(\n        timestampDelta,\n        rewardInfo.emissionsPerSecondX64,\n        poolLiquidity,\n        128,\n      );\n      adjustedRewardGrowthGlobalX64 = rewardInfo.growthGlobalX64.add(rewardGrowthDelta);\n    }\n\n    // Calculate the reward growth outside of the position\n    const tickLowerRewardGrowthsOutsideX64 = tickLowerDetail.rewardGrowthsOutside[i]!;\n    const tickUpperRewardGrowthsOutsideX64 = tickUpperDetail.rewardGrowthsOutside[i]!;\n\n    let rewardGrowthsBelowX64: BN = adjustedRewardGrowthGlobalX64;\n    if (tickLowerDetail.initialized) {\n      rewardGrowthsBelowX64 =\n        math.bitsToNumber(pool.tick_current_index.fields.bits) <\n        math.bitsToNumber(position.tick_lower_index.fields.bits)\n          ? math.subUnderflowU128(\n              adjustedRewardGrowthGlobalX64,\n              tickLowerRewardGrowthsOutsideX64,\n            )\n          : tickLowerRewardGrowthsOutsideX64;\n    }\n\n    let rewardGrowthsAboveX64: BN = new BN(0);\n    if (tickUpperDetail.initialized) {\n      rewardGrowthsAboveX64 =\n        math.bitsToNumber(pool.tick_current_index.fields.bits) <\n        math.bitsToNumber(position.tick_upper_index.fields.bits)\n          ? tickUpperRewardGrowthsOutsideX64\n          : math.subUnderflowU128(\n              adjustedRewardGrowthGlobalX64,\n              tickUpperRewardGrowthsOutsideX64,\n            );\n    }\n\n    const rewardGrowthInsideX64 = math.subUnderflowU128(\n      math.subUnderflowU128(adjustedRewardGrowthGlobalX64, rewardGrowthsBelowX64),\n      rewardGrowthsAboveX64,\n    );\n\n    // Knowing the growth of the reward checkpoint for the position, calculate and increment the amount owed for each reward.\n    const amountOwedX64 = positionRewardInfo.amountOwed.shln(64);\n\n    rewardOwed[i] = deprecatedPoolRewards(pool.id.id, i)\n      ? '0'\n      : amountOwedX64\n          .add(\n            math\n              .subUnderflowU128(\n                rewardGrowthInsideX64,\n                positionRewardInfo.growthInsideCheckpoint,\n              )\n              .mul(positionLiquidity),\n          )\n          .shrn(64)\n          .toString();\n  }\n\n  return rewardOwed;\n};\n","import BN from 'bn.js';\n\nconst ZERO = new BN(0);\nconst ONE = new BN(1);\nconst TWO = new BN(2);\n\nexport const bitMath = {\n  mul(n0: BN, n1: BN, limit: number): BN {\n    const result = n0.mul(n1);\n    if (this.isOverLimit(result, limit)) {\n      throw new Error(`Mul result higher than u${limit}`);\n    }\n    return result;\n  },\n  mulDiv(n0: BN, n1: BN, d: BN, limit: number): BN {\n    return this.mulDivRoundUpIf(n0, n1, d, false, limit);\n  },\n  mulDivRoundUpIf(n0: BN, n1: BN, d: BN, roundUp: boolean, limit: number): BN {\n    if (d.eq(ZERO)) {\n      throw new Error('mulDiv denominator is zero');\n    }\n\n    const p = this.mul(n0, n1, limit);\n    const n = p.div(d);\n\n    return roundUp && p.mod(d).gt(ZERO) ? n.add(ONE) : n;\n  },\n  isOverLimit(n0: BN, limit: number) {\n    const limitBN = TWO.pow(new BN(limit)).sub(ONE);\n    return n0.gt(limitBN);\n  },\n};\n","import { type TransactionObjectArgument, Transaction } from '@mysten/sui/transactions';\nimport { PaginatedCoins } from '@mysten/sui/client';\nimport Decimal from 'decimal.js';\nimport { Base } from './base';\nimport { normalizeSuiAddress } from '@mysten/sui/utils';\n\nexport class Coin extends Base {\n  isSUI(coinType: string) {\n    return (\n      normalizeSuiAddress(coinType) ===\n      '0x000000000000000000000000000000000000000000000000000002::sui::sui'\n    );\n  }\n\n  async getMetadata(coinType: string) {\n    return this.getCacheOrSet(`coin-metadata-${coinType}`, async () => {\n      const result = await this.provider.getCoinMetadata({ coinType });\n      if (!result) {\n        throw new Error(`Coin \"${coinType}\" is not found`);\n      }\n      return result;\n    });\n  }\n\n  async selectTradeCoins(\n    owner: string,\n    coinType: string,\n    expectedAmount: Decimal,\n  ): Promise<string[]> {\n    if (expectedAmount.eq(0)) {\n      return [];\n    }\n\n    const coins: PaginatedCoins['data'][number][] = [];\n    const coinIds: string[] = [];\n    let totalAmount = new Decimal(0);\n    let result: PaginatedCoins | undefined;\n\n    do {\n      result = await this.provider.getCoins({\n        owner,\n        coinType,\n        cursor: result?.nextCursor,\n      });\n      coins.push(...result.data);\n    } while (result.hasNextPage);\n\n    coins.sort((a, b) => {\n      // From big to small\n      return Number(b.balance) - Number(a.balance);\n    });\n\n    for (const coin of coins) {\n      coinIds.push(coin.coinObjectId);\n      totalAmount = totalAmount.add(coin.balance);\n      if (totalAmount.gte(expectedAmount)) {\n        break;\n      }\n    }\n    return coinIds;\n  }\n\n  convertTradeCoins(\n    txb: Transaction,\n    coinIds: string[],\n    coinType: string,\n    amount: Decimal,\n  ): TransactionObjectArgument[] {\n    return this.isSUI(coinType)\n      ? [txb.splitCoins(txb.gas, [txb.pure.u64(amount.toNumber())])[0]!]\n      : coinIds.map((id) => txb.object(id));\n  }\n\n  zero(token: string, txb: Transaction): TransactionObjectArgument {\n    return txb.moveCall({\n      typeArguments: [token],\n      target: `0x2::coin::zero`,\n      arguments: [],\n    });\n  }\n\n  formatCoinType(type: string, fillZero: boolean = false) {\n    const HASH_LENGTH = 64;\n    let address = type.replace(/^0x/i, '');\n    address = address.replace(/^0+(2::sui::SUI)$/, '$1');\n\n    const fill =\n      fillZero && address.length < HASH_LENGTH && type !== '2::sui:SUI'\n        ? '0'.repeat(HASH_LENGTH - address.length)\n        : '';\n\n    return '0x' + fill + address;\n  }\n\n  async takeAmountFromCoins(\n    address: string,\n    coinType: string,\n    amount: number,\n    txb: Transaction,\n  ) {\n    const coins = await this.selectTradeCoins(address, coinType, new Decimal(amount));\n\n    if (this.isSUI(coinType)) {\n      return [this.splitSUIFromGas([amount], txb)];\n    } else {\n      return this.splitMultiCoins(coins, [amount], txb);\n    }\n  }\n\n  splitSUIFromGas(amount: number[], txb: Transaction) {\n    return txb.splitCoins(txb.gas, amount);\n  }\n\n  splitMultiCoins(coins: string[], amounts: number[], txb: Transaction) {\n    const coinObjects = coins.map((coin) => txb.object(coin));\n    const mergedCoin = coinObjects[0]!;\n    if (coins.length > 1) {\n      txb.mergeCoins(mergedCoin, coinObjects.slice(1));\n    }\n    const splitedCoins = txb.splitCoins(mergedCoin, amounts);\n    return [splitedCoins, mergedCoin];\n  }\n}\n","import { Transaction } from '@mysten/sui/transactions';\nimport { SUI_CLOCK_OBJECT_ID } from '@mysten/sui/utils';\nimport { Base } from './base';\nimport Decimal from 'decimal.js';\nimport { Pool } from './pool';\nimport {\n  MIN_SQRT_PRICE,\n  MAX_SQRT_PRICE,\n  MIN_TICK_INDEX,\n  MAX_TICK_INDEX,\n} from '../constants';\nimport { BN } from 'bn.js';\nimport * as suiKit from '../utils/sui-kit';\nimport { getMoveObjectType, getObjectFields, getObjectId } from './legacy';\n\nexport const ONE_MINUTE = 60 * 1000;\nconst MAX_TICK_STEP = 100;\n\nexport declare module Trade {\n  export interface SwapOptions {\n    routes: {\n      pool: string;\n      a2b: boolean;\n      /**\n       * ```typescript\n       * const swapResult = sdk.trade.computeSwapResult({ ... })\n       * const nextTickIndex = sdk.math.bitsToNumber(swapResult.tick_current_index.bits)\n       * ```\n       */\n      nextTickIndex: number;\n    }[];\n    coinTypeA: string;\n    coinTypeB: string;\n    address: string;\n    amountA: string | number;\n    amountB: string | number;\n    amountSpecifiedIsInput: boolean;\n    slippage: string;\n    deadline?: number;\n    txb?: Transaction;\n  }\n\n  export interface ComputeSwapResultOptions {\n    pools: { pool: string; a2b: boolean }[];\n    address: string;\n    amountSpecified: string | number;\n    amountSpecifiedIsInput: boolean;\n    tickStep?: number;\n  }\n\n  export interface ComputeSwapResultOptionsV2 {\n    pools: { pool: string; a2b: boolean; amountSpecified: string | number }[];\n    address: string;\n    amountSpecifiedIsInput: boolean;\n    tickStep?: number;\n  }\n\n  export interface ComputedSwapResult {\n    a_to_b: boolean;\n    amount_a: string;\n    amount_b: string;\n    fee_amount: string;\n    is_exact_in: boolean;\n    liquidity: string;\n    pool: string;\n    protocol_fee: string;\n    recipient: string;\n    sqrt_price: string;\n    tick_current_index: { bits: number };\n    tick_pre_index: { bits: number };\n  }\n\n  export interface SwapWithReturnOptions {\n    poolId: string;\n    coinType: string;\n    amountA: string;\n    amountB: string;\n    swapAmount: string;\n    nextTickIndex: number;\n    slippage: string;\n    amountSpecifiedIsInput: boolean;\n    a2b: boolean;\n    address: string;\n    deadline?: number;\n    txb?: Transaction;\n  }\n}\n\nexport class Trade extends Base {\n  async swap(options: Trade.SwapOptions): Promise<Transaction> {\n    const { coinTypeA, coinTypeB, address, amountSpecifiedIsInput, slippage } = options;\n    const amountA = new Decimal(options.amountA);\n    const amountB = new Decimal(options.amountB);\n    const contract = await this.contract.getConfig();\n    const routes = await Promise.all(\n      options.routes.map(async (item) => {\n        const typeArguments = await this.pool.getPoolTypeArguments(item.pool);\n        const [coinA, coinB] = await Promise.all([\n          this.coin.getMetadata(typeArguments[0]),\n          this.coin.getMetadata(typeArguments[1]),\n        ]);\n        return {\n          ...item,\n          coinA,\n          coinB,\n          typeArguments: typeArguments,\n        };\n      }),\n    );\n    const coinIds = await this.coin.selectTradeCoins(address, coinTypeA, amountA);\n    const { functionName, typeArguments } = this.getFunctionNameAndTypeArguments(\n      routes.map(({ typeArguments }) => typeArguments),\n      coinTypeA,\n      coinTypeB,\n    );\n\n    const sqrtPrices = routes.map(({ nextTickIndex, coinA, coinB, a2b }) => {\n      const nextTickPrice = this.math.tickIndexToPrice(\n        nextTickIndex,\n        coinA.decimals,\n        coinB.decimals,\n      );\n      return this.sqrtPriceWithSlippage(\n        nextTickPrice,\n        slippage,\n        a2b,\n        coinA.decimals,\n        coinB.decimals,\n      );\n    });\n\n    const txb = options.txb || new Transaction();\n    txb.moveCall({\n      target: `${contract.PackageId}::swap_router::${functionName}`,\n      typeArguments: typeArguments,\n      arguments: [\n        ...routes.map(({ pool }) => txb.object(pool)),\n        txb.makeMoveVec({\n          elements: this.coin.convertTradeCoins(txb, coinIds, coinTypeA, amountA),\n        }),\n        txb.pure.u64((amountSpecifiedIsInput ? amountA : amountB).toFixed(0)),\n        txb.pure.u64(\n          this.amountOutWithSlippage(\n            amountSpecifiedIsInput ? amountB : amountA,\n            slippage,\n            amountSpecifiedIsInput,\n          ),\n        ),\n        ...sqrtPrices.map((price) => txb.pure.u128(price)),\n        txb.pure.bool(amountSpecifiedIsInput),\n        txb.pure.address(address),\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    return txb;\n  }\n\n  async computeSwapResult(\n    options: Trade.ComputeSwapResultOptions,\n  ): Promise<Trade.ComputedSwapResult[]> {\n    const { pools, amountSpecified, amountSpecifiedIsInput, address, tickStep } = options;\n    const contract = await this.contract.getConfig();\n    const poolIds = pools.map((pool) => pool.pool);\n    let poolResult = await suiKit.multiGetObjects(this.provider, poolIds, {\n      showContent: true,\n    });\n    const txb = new Transaction();\n    poolResult.map(async (pool) => {\n      const fields = getObjectFields(pool) as unknown as Pool.PoolFields;\n      const _pool = pools.find((item) => item.pool === fields.id.id);\n\n      const current_tick = this.math.bitsToNumber(fields.tick_current_index.fields.bits);\n      let min_tick = current_tick - fields.tick_spacing * (tickStep || MAX_TICK_STEP);\n      let max_tick = current_tick + fields.tick_spacing * (tickStep || MAX_TICK_STEP);\n      min_tick = min_tick < MIN_TICK_INDEX ? MIN_TICK_INDEX : min_tick;\n      max_tick = max_tick > MAX_TICK_INDEX ? MAX_TICK_INDEX : max_tick;\n\n      const types = this.pool.parsePoolType(getMoveObjectType(pool)!);\n\n      txb.moveCall({\n        target: `${contract.PackageId}::pool_fetcher::compute_swap_result`,\n        typeArguments: types,\n        arguments: [\n          // pool\n          txb.object(fields.id.id),\n          // a_to_b\n          txb.pure.bool(_pool!.a2b),\n          // amount_specified\n          txb.pure.u128(new Decimal(amountSpecified).toFixed(0)),\n          // amount_specified_is_input\n          txb.pure.bool(amountSpecifiedIsInput),\n          // sqrt_price_limit\n          txb.pure.u128(\n            this.math\n              .tickIndexToSqrtPriceX64(_pool!.a2b ? min_tick : max_tick)\n              .toString(),\n          ),\n          // clock\n          txb.object(SUI_CLOCK_OBJECT_ID),\n          // versioned\n          txb.object(contract.Versioned),\n        ],\n      });\n    });\n    const result = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: address,\n    });\n\n    if (result.error) {\n      throw new Error(result.error);\n    }\n\n    return result.events.map((event) => {\n      return event.parsedJson as Trade.ComputedSwapResult;\n    });\n  }\n\n  async computeSwapResultV2(\n    options: Trade.ComputeSwapResultOptionsV2,\n  ): Promise<Trade.ComputedSwapResult[]> {\n    const { pools, amountSpecifiedIsInput, address, tickStep } = options;\n    const contract = await this.contract.getConfig();\n    const poolIds = pools.map((pool) => pool.pool);\n    let poolResults = await suiKit.multiGetObjects(\n      this.provider,\n      Array.from(new Set(poolIds)),\n      {\n        showContent: true,\n      },\n    );\n    const txb = new Transaction();\n    pools.forEach(async (pool) => {\n      const poolObject = poolResults.find(\n        (poolResult) => getObjectId(poolResult) === pool.pool,\n      )!;\n      const fields = getObjectFields(poolObject) as unknown as Pool.PoolFields;\n\n      const current_tick = this.math.bitsToNumber(fields.tick_current_index.fields.bits);\n      let min_tick = current_tick - fields.tick_spacing * (tickStep || MAX_TICK_STEP);\n      let max_tick = current_tick + fields.tick_spacing * (tickStep || MAX_TICK_STEP);\n      min_tick = min_tick < MIN_TICK_INDEX ? MIN_TICK_INDEX : min_tick;\n      max_tick = max_tick > MAX_TICK_INDEX ? MAX_TICK_INDEX : max_tick;\n\n      const types = this.pool.parsePoolType(getMoveObjectType(poolObject)!);\n\n      txb.moveCall({\n        target: `${contract.PackageId}::pool_fetcher::compute_swap_result`,\n        typeArguments: types,\n        arguments: [\n          // pool\n          txb.object(fields.id.id),\n          // a_to_b\n          txb.pure.bool(pool.a2b),\n          // amount_specified\n          txb.pure.u128(new Decimal(pool.amountSpecified).toFixed(0)),\n          // amount_specified_is_input\n          txb.pure.bool(amountSpecifiedIsInput),\n          // sqrt_price_limit\n          txb.pure.u128(\n            this.math.tickIndexToSqrtPriceX64(pool.a2b ? min_tick : max_tick).toString(),\n          ),\n          // clock\n          txb.object(SUI_CLOCK_OBJECT_ID),\n          // versioned\n          txb.object(contract.Versioned),\n        ],\n      });\n    });\n    const result = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: address,\n    });\n\n    if (result.error) {\n      throw new Error(result.error);\n    }\n\n    return result.events.map((event) => {\n      return event.parsedJson as Trade.ComputedSwapResult;\n    });\n  }\n\n  async swapWithReturn(options: Trade.SwapWithReturnOptions) {\n    const {\n      poolId,\n      coinType,\n      amountA,\n      amountB,\n      swapAmount,\n      address,\n      slippage,\n      amountSpecifiedIsInput,\n      nextTickIndex,\n      a2b,\n    } = options;\n    const txb = options.txb || new Transaction();\n    const _amountA = new Decimal(amountA);\n    const _amountB = new Decimal(amountB);\n\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n    const [coinA, coinB] = await Promise.all([\n      this.coin.getMetadata(typeArguments[0]),\n      this.coin.getMetadata(typeArguments[1]),\n    ]);\n    const contract = await this.contract.getConfig();\n\n    const nextTickPrice = this.math.tickIndexToPrice(\n      nextTickIndex,\n      coinA.decimals,\n      coinB.decimals,\n    );\n\n    const price = this.sqrtPriceWithSlippage(\n      nextTickPrice,\n      slippage,\n      a2b,\n      coinA.decimals,\n      coinB.decimals,\n    );\n\n    const [sendCoin, mergeCoin] = await this.coin.takeAmountFromCoins(\n      address,\n      coinType,\n      a2b ? _amountA.toNumber() : _amountB.toNumber(),\n      txb,\n    );\n\n    const [coinVecA, coinVecB] = txb.moveCall({\n      target: `${contract.PackageId}::swap_router::swap_${\n        a2b ? 'a_b' : 'b_a'\n      }_with_return_`,\n      typeArguments: typeArguments,\n      arguments: [\n        txb.object(poolId),\n        txb.makeMoveVec({\n          elements: [sendCoin!],\n        }),\n        txb.pure.u64(swapAmount),\n        txb.pure.u64(\n          this.amountOutWithSlippage(\n            new Decimal(a2b ? amountB : amountA),\n            slippage,\n            amountSpecifiedIsInput,\n          ),\n        ),\n        txb.pure.u128(price),\n        txb.pure.bool(amountSpecifiedIsInput),\n        txb.pure.address(address),\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    if (mergeCoin) {\n      txb.transferObjects([mergeCoin], address);\n    }\n\n    return {\n      txb,\n      coinVecA: a2b ? coinVecB : coinVecA,\n      coinVecB: a2b ? coinVecA : coinVecB,\n    };\n  }\n\n  protected getFunctionNameAndTypeArguments(\n    pools: Pool.Types[],\n    coinTypeA: string,\n    coinTypeB: string,\n  ) {\n    let typeArguments: string[] = [];\n    const functionName: string[] = ['swap'];\n    if (pools.length === 1) {\n      typeArguments = pools[0]!;\n      if (coinTypeA === typeArguments[0]) {\n        functionName.push('a', 'b');\n      } else {\n        functionName.push('b', 'a');\n      }\n    } else {\n      const pool1Args = pools[0]!;\n      const pool2Args = pools[1]!;\n      if (coinTypeA === pool1Args[0]) {\n        functionName.push('a', 'b');\n        typeArguments.push(pool1Args[0], pool1Args[2], pool1Args[1]);\n      } else {\n        functionName.push('b', 'a');\n        typeArguments.push(pool1Args[1], pool1Args[2], pool1Args[0]);\n      }\n\n      typeArguments.push(pool2Args[2], coinTypeB);\n      if (coinTypeB === pool2Args[0]) {\n        functionName.push('c', 'b');\n      } else {\n        functionName.push('b', 'c');\n      }\n    }\n\n    return {\n      functionName: functionName.join('_'),\n      typeArguments,\n    };\n  }\n\n  amountOutWithSlippage(\n    amountOut: Decimal,\n    slippage: string,\n    amountSpecifiedIsInput: boolean,\n  ) {\n    if (amountSpecifiedIsInput) {\n      const minus = new Decimal(100).minus(slippage).div(100);\n      return new Decimal(amountOut).mul(minus).toFixed(0);\n    }\n\n    const plus = new Decimal(100).plus(slippage).div(100);\n    return new Decimal(amountOut).mul(plus).toFixed(0);\n  }\n\n  sqrtPriceWithSlippage(\n    price: Decimal,\n    slippage: string,\n    a2b: boolean,\n    decimalsA: number,\n    decimalsB: number,\n  ): string {\n    const newPrice = new Decimal(price).mul(\n      a2b\n        ? new Decimal(100).minus(slippage).div(100)\n        : new Decimal(100).plus(slippage).div(100),\n    );\n    const sqrtPrice = this.math.priceToSqrtPriceX64(newPrice, decimalsA, decimalsB);\n\n    if (sqrtPrice.lt(new BN(MIN_SQRT_PRICE))) {\n      return MIN_SQRT_PRICE;\n    }\n    if (sqrtPrice.gt(new BN(MAX_SQRT_PRICE))) {\n      return MAX_SQRT_PRICE;\n    }\n    return sqrtPrice.toString();\n  }\n}\n","import { normalizeStructTag, SUI_CLOCK_OBJECT_ID } from '@mysten/sui/utils';\nimport { Transaction, type TransactionObjectArgument } from '@mysten/sui/transactions';\nimport { Base } from './base';\nimport { validateObjectResponse } from '../utils/validate-object-response';\nimport { getObjectFields } from './legacy';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport { MAX_TICK_INDEX, MIN_TICK_INDEX } from '../constants';\nimport { ONE_MINUTE } from './trade';\nimport { bcs } from '@mysten/sui/bcs';\nimport { SuiObjectResponse } from '@mysten/sui/client';\nimport { NFT } from './nft';\nimport { unstable_getObjectFields } from '..';\nimport { forEacGetOwnedObjects, multiGetObjects } from '../utils/sui-kit';\nimport { isNullObjectId } from '../utils/is-null-object-id';\n\nexport declare module Vault {\n  export interface VaultStrategyField {\n    clmm_pool_id: string;\n    id: {\n      id: string;\n    };\n    coin_a_type_name: {\n      fields: {\n        name: string;\n      };\n      type: string;\n    };\n    coin_b_type_name: {\n      fields: {\n        name: string;\n      };\n      type: string;\n    };\n    effective_tick_lower: {\n      fields: {\n        bits: number;\n      };\n      type: string;\n    };\n    effective_tick_upper: {\n      fields: {\n        bits: number;\n      };\n      type: string;\n    };\n    total_share: string;\n\n    vaults: {\n      fields: {\n        id: {\n          id: string;\n        };\n      };\n    };\n    accounts: {\n      fields: {\n        id: {\n          id: string;\n        };\n      };\n    };\n    default_base_rebalance_threshold: number;\n    default_limit_rebalance_threshold: number;\n    base_tick_step_minimum: number;\n    limit_tick_step_minimum: number;\n    fee_type_name: {\n      fields: {\n        name: string;\n      };\n    };\n  }\n\n  export interface VaultsIdMyStrategyVaultField {\n    name: string;\n    value: {\n      fields: {\n        value: {\n          fields: {\n            sqrt_price: string;\n            strategy_id: string;\n            vault_id: string;\n            base_liquidity: string;\n            limit_liquidity: string;\n            limit_clmm_position_id: string;\n            base_clmm_position_id: string;\n            base_lower_index: {\n              fields: {\n                bits: number;\n              };\n            };\n            base_upper_index: {\n              fields: {\n                bits: number;\n              };\n            };\n            limit_lower_index: {\n              fields: {\n                bits: number;\n              };\n            };\n            limit_upper_index: {\n              fields: {\n                bits: number;\n              };\n            };\n            coin_a_type_name: {\n              fields: {\n                name: string;\n              };\n            };\n            coin_b_type_name: {\n              fields: {\n                name: string;\n              };\n            };\n          };\n        };\n      };\n    };\n  }\n\n  export interface CreateAndDepositVaultArguments {\n    txb?: Transaction;\n    deadline?: number;\n    address: string;\n    strategyId: string;\n    poolId: string;\n    coinTypeA: string;\n    coinTypeB: string;\n    amountA: string;\n    amountB: string;\n    baseLowerIndex: number;\n    baseUpperIndex: number;\n    limitLowerIndex: number;\n    limitUpperIndex: number;\n    baseTickStep: number;\n    limitTickStep: number;\n  }\n\n  export interface CreateVaultArguments\n    extends Pick<\n      Vault.CreateAndDepositVaultArguments,\n      | 'strategyId'\n      | 'txb'\n      | 'address'\n      | 'baseLowerIndex'\n      | 'baseUpperIndex'\n      | 'limitLowerIndex'\n      | 'limitUpperIndex'\n    > {}\n\n  export interface DepositVaultArguments\n    extends Pick<\n      Vault.CreateAndDepositVaultArguments,\n      | 'strategyId'\n      | 'txb'\n      | 'address'\n      | 'deadline'\n      | 'poolId'\n      | 'coinTypeA'\n      | 'coinTypeB'\n      | 'amountA'\n      | 'amountB'\n    > {\n    vaultId: string;\n  }\n\n  export interface WithdrawVaultArguments {\n    txb?: Transaction;\n    deadline?: number;\n    slippage?: string | number;\n    strategyId: string;\n    vaultId: string;\n    poolId: string;\n    address: string;\n    percentage: number;\n    onlyTokenA?: boolean;\n    onlyTokenB?: boolean;\n  }\n\n  export interface collectClmmRewardDirectReturnVaultArguments {\n    txb?: Transaction;\n    address: string;\n    strategyId: string;\n    poolId: string;\n    vaultId: string;\n  }\n\n  export interface CloseVaultArguments {\n    txb?: Transaction;\n    strategyId: string;\n    vaultId: string;\n  }\n\n  export interface withdrawAllVaultArguments\n    extends WithdrawVaultArguments,\n      collectClmmRewardDirectReturnVaultArguments,\n      CloseVaultArguments {}\n\n  export interface OnlyTokenSwapWithReturnOptions\n    extends Pick<\n      Vault.CreateAndDepositVaultArguments,\n      | 'coinTypeA'\n      | 'coinTypeB'\n      | 'amountA'\n      | 'amountB'\n      | 'poolId'\n      | 'address'\n      | 'txb'\n      | 'deadline'\n    > {\n    liquidity: string;\n    sqrt_price: string;\n    lowerIndex: number;\n    upperIndex: number;\n    a2b: boolean;\n    slippage?: string | number;\n  }\n\n  export interface VaultWithdrawEvents {\n    amount_a: string;\n    amount_b: string;\n    percentage: string;\n  }\n\n  export interface EventParseJson {\n    a_to_b: boolean;\n    amount_a: string;\n    amount_b: string;\n    tick_current_index: {\n      bits: number;\n    };\n    tick_pre_index: {\n      bits: number;\n    };\n  }\n\n  export interface VaultBalanceAmountOptions {\n    strategyId: string;\n    vaultId: string;\n    coinTypeA: string;\n    coinTypeB: string;\n    address: string;\n  }\n\n  export interface MyVaultOwnedObjects {\n    description: string;\n    id: { id: string };\n    name: string;\n    strategy_id: string;\n    url: string;\n    coin_a_type_name: {\n      fields: {\n        name: string;\n      };\n    };\n    coin_b_type_name: {\n      fields: {\n        name: string;\n      };\n    };\n  }\n\n  export interface TurbosMyVaultPosition extends NFT.PositionField {\n    tickLower: number;\n    tickUpper: number;\n    objectId: string;\n  }\n\n  export interface TurbosMyVault {\n    coinTypeA: string;\n    coinTypeB: string;\n    strategyId: string;\n    url: string;\n    name: string;\n    id: string;\n    nftId: string;\n    vaultId: string;\n    baseLowerTick: number;\n    baseUpperTick: number;\n    limitLowerTick: number;\n    limitUpperTick: number;\n    sqrt_price: string;\n    base_liquidity: string;\n    limit_liquidity: string;\n    clmm_pool_id: string;\n    limit_clmm_position_id: string;\n    base_clmm_position_id: string;\n    accountsId: string;\n    limit_clmm_position?: TurbosMyVaultPosition;\n    base_clmm_position?: TurbosMyVaultPosition;\n  }\n\n  export interface TurbosVaultAmount\n    extends Pick<\n      TurbosMyVault,\n      | 'strategyId'\n      | 'vaultId'\n      | 'base_liquidity'\n      | 'limit_liquidity'\n      | 'baseLowerTick'\n      | 'baseUpperTick'\n      | 'limitLowerTick'\n      | 'limitUpperTick'\n      | 'coinTypeA'\n      | 'coinTypeB'\n    > {\n    address: string;\n    poolSqrtPrice: string;\n  }\n}\n\nexport class Vault extends Base {\n  async createAndDepositVault(\n    options: Vault.CreateAndDepositVaultArguments,\n  ): Promise<Transaction> {\n    const {\n      address,\n      strategyId,\n      poolId,\n      coinTypeA,\n      coinTypeB,\n      baseLowerIndex,\n      baseUpperIndex,\n      limitLowerIndex,\n      limitUpperIndex,\n      baseTickStep,\n      limitTickStep,\n    } = options;\n    let txb = options.txb || new Transaction();\n\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    let _baseLowerIndex = baseLowerIndex;\n    let _baseUpperIndex = baseUpperIndex;\n    let _limitLowerIndex = limitLowerIndex;\n    let _limitUpperIndex = limitUpperIndex;\n    let _sendCoinA: TransactionObjectArgument;\n    let _sendCoinB: TransactionObjectArgument;\n\n    if (options.amountA === '0' && options.amountB === '0') {\n      return txb;\n    } else if (options.amountB === '0' || options.amountA === '0') {\n      // only A Token or B Token\n      const poolFields = await this.pool.getPool(poolId);\n      const swapWithReturnResult = await this.onlyTokenSwapWithReturn({\n        liquidity: poolFields.liquidity,\n        sqrt_price: poolFields.sqrt_price,\n        lowerIndex: baseLowerIndex,\n        upperIndex: baseUpperIndex,\n        amountA: options.amountA,\n        amountB: options.amountB,\n        coinTypeA,\n        coinTypeB,\n        poolId,\n        txb,\n        address,\n        deadline: options.deadline,\n        a2b: options.amountB === '0' ? true : false,\n      });\n\n      const strategyFields = await this.getStrategy(strategyId);\n      const [swapBaseLowerIndex, swapBaseUpperIndex] = this.getCalculateVaultStepTick(\n        baseTickStep,\n        poolFields.tick_spacing.toString(),\n        swapWithReturnResult.swapResultSqrtPrice,\n      );\n\n      const [swapLimitLowerIndex, swapLimitUpperIndex] = this.getCalculateVaultStepTick(\n        strategyFields.base_tick_step_minimum,\n        poolFields.tick_spacing.toString(),\n        swapWithReturnResult.swapResultSqrtPrice,\n      );\n\n      txb = swapWithReturnResult.txb;\n      _baseLowerIndex = swapBaseLowerIndex;\n      _baseUpperIndex = swapBaseUpperIndex;\n      _limitLowerIndex = swapLimitLowerIndex;\n      _limitUpperIndex = swapLimitUpperIndex;\n      _sendCoinA = swapWithReturnResult.coinVecA!;\n      _sendCoinB = swapWithReturnResult.coinVecB!;\n    } else {\n      // A Token and B Token\n      const [sendCoinA, mergeCoinA] = await this.coin.takeAmountFromCoins(\n        address,\n        coinTypeA,\n        Number(options.amountA),\n        txb,\n      );\n      const [sendCoinB, mergeCoinB] = await this.coin.takeAmountFromCoins(\n        address,\n        coinTypeB,\n        Number(options.amountB),\n        txb,\n      );\n\n      _sendCoinA = sendCoinA!;\n      _sendCoinB = sendCoinB!;\n\n      const coins: TransactionObjectArgument[] = [];\n      [mergeCoinA, mergeCoinB].forEach((item) => {\n        if (item) {\n          coins.push(item);\n        }\n      });\n\n      if (coins.length > 0) {\n        txb.transferObjects(coins, address);\n      }\n    }\n\n    txb.moveCall({\n      target: `${contract.VaultPackageId}::router::open_vault_and_deposit`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(contract.VaultRewarderManager),\n        txb.object(strategyId),\n        txb.object(poolId),\n        txb.object(contract.Positions),\n        _sendCoinA!,\n        _sendCoinB!,\n        txb.pure.u32(Number(Math.abs(_baseLowerIndex).toFixed(0))),\n        txb.pure.bool(_baseLowerIndex < 0),\n        txb.pure.u32(Number(Math.abs(_baseUpperIndex).toFixed(0))),\n        txb.pure.bool(_baseUpperIndex < 0),\n        txb.pure.u32(Number(Math.abs(_limitLowerIndex).toFixed(0))),\n        txb.pure.bool(_limitLowerIndex < 0),\n        txb.pure.u32(Number(Math.abs(_limitUpperIndex).toFixed(0))),\n        txb.pure.bool(_limitUpperIndex < 0),\n        txb.pure.u32(baseTickStep),\n        txb.pure.u32(limitTickStep),\n        txb.pure.address(address),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n      typeArguments: typeArguments,\n    });\n\n    return txb;\n  }\n\n  async createVault(options: Vault.CreateVaultArguments): Promise<Transaction> {\n    const {\n      strategyId,\n      address,\n      baseLowerIndex,\n      baseUpperIndex,\n      limitLowerIndex,\n      limitUpperIndex,\n    } = options;\n    const txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n\n    const fields = await this.getStrategy(strategyId);\n\n    txb.moveCall({\n      target: `${contract.VaultPackageId}::router::open_vault`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(strategyId),\n        txb.pure.u32(Number(Math.abs(baseLowerIndex).toFixed(0))),\n        txb.pure.bool(baseLowerIndex < 0),\n        txb.pure.u32(Number(Math.abs(baseUpperIndex).toFixed(0))),\n        txb.pure.bool(baseUpperIndex < 0),\n        txb.pure.u32(Number(Math.abs(limitLowerIndex).toFixed(0))),\n        txb.pure.bool(limitLowerIndex < 0),\n        txb.pure.u32(Number(Math.abs(limitUpperIndex).toFixed(0))),\n        txb.pure.bool(limitUpperIndex < 0),\n        txb.pure.address(address),\n      ],\n      typeArguments: [\n        fields.coin_a_type_name.fields.name,\n        fields.coin_b_type_name.fields.name,\n      ],\n    });\n\n    return txb;\n  }\n\n  async depositVault(options: Vault.DepositVaultArguments): Promise<Transaction> {\n    const { strategyId, vaultId, poolId, coinTypeA, coinTypeB, address } = options;\n\n    let txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    let _sendCoinA: TransactionObjectArgument;\n    let _sendCoinB: TransactionObjectArgument;\n\n    if (!options.amountA && !options.amountB) {\n      return txb;\n    } else if (options.amountB === '0' || options.amountA === '0') {\n      const strategyFields = await this.getStrategy(strategyId);\n      const vaultFields = await this.getStrategyVault(\n        strategyFields.vaults.fields.id.id,\n        vaultId,\n      );\n      const poolFields = await this.pool.getPool(poolId);\n\n      const baseLowerIndex = this.math.bitsToNumber(\n        vaultFields.value.fields.value.fields.base_lower_index.fields.bits,\n      );\n      const baseUpperIndex = this.math.bitsToNumber(\n        vaultFields.value.fields.value.fields.base_upper_index.fields.bits,\n      );\n\n      const swapWithReturnResult = await this.onlyTokenSwapWithReturn({\n        liquidity: poolFields.liquidity,\n        sqrt_price: poolFields.sqrt_price,\n        lowerIndex: baseLowerIndex,\n        upperIndex: baseUpperIndex,\n        amountA: options.amountA,\n        amountB: options.amountB,\n        coinTypeA,\n        coinTypeB,\n        poolId,\n        txb,\n        address,\n        deadline: options.deadline,\n        a2b: options.amountB === '0' ? true : false,\n      });\n\n      txb = swapWithReturnResult.txb;\n      _sendCoinA = swapWithReturnResult.coinVecA!;\n      _sendCoinB = swapWithReturnResult.coinVecB!;\n    } else {\n      const [sendCoinA, mergeCoinA] = await this.coin.takeAmountFromCoins(\n        address,\n        coinTypeA,\n        Number(options.amountA),\n        txb,\n      );\n      const [sendCoinB, mergeCoinB] = await this.coin.takeAmountFromCoins(\n        address,\n        coinTypeB,\n        Number(options.amountB),\n        txb,\n      );\n\n      _sendCoinA = sendCoinA!;\n      _sendCoinB = sendCoinB!;\n\n      const coins: TransactionObjectArgument[] = [];\n      [mergeCoinA, mergeCoinB].forEach((item) => {\n        if (item) {\n          coins.push(item);\n        }\n      });\n\n      if (coins.length > 0) {\n        txb.transferObjects(coins, address);\n      }\n    }\n\n    txb.moveCall({\n      target: `${contract.VaultPackageId}::router::deposit`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(contract.VaultRewarderManager),\n        txb.object(strategyId),\n        txb.object(vaultId),\n        txb.object(poolId),\n        txb.object(contract.Positions),\n        _sendCoinA!,\n        _sendCoinB!,\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n      typeArguments: typeArguments,\n    });\n\n    return txb;\n  }\n\n  async withdrawVaultV2(options: Vault.WithdrawVaultArguments): Promise<Transaction> {\n    const { strategyId, vaultId, poolId, address, percentage } = options;\n    const txb = options.txb || new Transaction();\n\n    if (options.onlyTokenA && options.onlyTokenB) {\n      return txb;\n    } else if (options.onlyTokenA || options.onlyTokenB) {\n      return this.onlyTokenWithdrawVault(options);\n    }\n\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    txb.moveCall({\n      target: `${contract.VaultPackageId}::router::withdraw_v2`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(contract.VaultUserTierConfig),\n        txb.object(contract.VaultRewarderManager),\n        txb.object(strategyId),\n        txb.object(vaultId),\n        txb.object(poolId),\n        txb.object(contract.Positions),\n        txb.pure.u64(percentage),\n        txb.pure.bool(percentage === 1000000),\n        txb.pure.address(address),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n      typeArguments: typeArguments,\n    });\n\n    return txb;\n  }\n\n  async collectClmmRewardDirectReturnVault(\n    options: Vault.collectClmmRewardDirectReturnVaultArguments,\n  ): Promise<Transaction> {\n    const { address, strategyId, poolId, vaultId } = options;\n    const txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    const pool = await this.pool.getPool(poolId);\n\n    pool.reward_infos.forEach((info, index) => {\n      txb.moveCall({\n        target: `${contract.VaultPackageId}::router::collect_clmm_reward_direct_return`,\n        arguments: [\n          txb.object(contract.VaultGlobalConfig),\n          txb.object(strategyId),\n          txb.object(vaultId),\n          txb.object(poolId),\n          txb.object(contract.Positions),\n          txb.object(info.fields.vault), //clmm reward vault\n          txb.pure.u64(index), // reward vault index\n          txb.pure.address(address),\n          txb.object(SUI_CLOCK_OBJECT_ID),\n          // versioned\n          txb.object(contract.Versioned),\n        ],\n        typeArguments: [...typeArguments, info.fields.vault_coin_type],\n      });\n    });\n\n    return txb;\n  }\n\n  async closeVault(options: Vault.CloseVaultArguments): Promise<Transaction> {\n    const { strategyId, vaultId } = options;\n    const txb = options.txb || new Transaction();\n\n    const contract = await this.contract.getConfig();\n    const fields = await this.getStrategy(strategyId);\n\n    txb.moveCall({\n      target: `${contract.VaultPackageId}::router::close_vault`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(strategyId),\n        txb.object(vaultId),\n      ],\n      typeArguments: [\n        fields.coin_a_type_name.fields.name,\n        fields.coin_b_type_name.fields.name,\n      ],\n    });\n\n    return txb;\n  }\n\n  async withdrawAllVault(options: Vault.withdrawAllVaultArguments) {\n    let txb = await this.collectClmmRewardDirectReturnVault(options);\n    txb = await this.withdrawVaultV2({ txb, ...options });\n    txb = await this.closeVault({ txb, ...options });\n    return txb;\n  }\n\n  async computeTokenWithdrawVaultSwapResult(options: Vault.WithdrawVaultArguments) {\n    const { poolId, strategyId, vaultId, percentage, address } = options;\n    let txb = options.txb ? Transaction.from(options.txb) : new Transaction();\n\n    txb = await this.collectClmmRewardDirectReturnVault(options);\n\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    const [coinVecA, coinVecB] = txb.moveCall({\n      target: `${contract.VaultPackageId}::vault::withdraw_v2`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(contract.VaultUserTierConfig),\n        txb.object(contract.VaultRewarderManager),\n        txb.object(strategyId),\n        txb.object(vaultId),\n        txb.object(poolId),\n        txb.object(contract.Positions),\n        txb.pure.u64(percentage),\n        txb.pure.bool(percentage === 1000000),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n      typeArguments: typeArguments,\n    });\n\n    const result = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: address,\n    });\n\n    if (result.error) {\n      throw new Error(result.error);\n    }\n\n    let amountA: string | undefined;\n    let amountB: string | undefined;\n    result.events.map((event) => {\n      const eventResult = event.parsedJson as Vault.VaultWithdrawEvents;\n      if (eventResult.percentage) {\n        amountA = eventResult.amount_a;\n        amountB = eventResult.amount_b;\n      }\n    });\n\n    if (!amountA || !amountB) {\n      throw new Error('event does not exist');\n    }\n    const a2b = options.onlyTokenB ? true : false;\n\n    const [returnCoinA, returnCoinB] = txb.moveCall({\n      target: `${contract.PackageId}::swap_router::swap_${\n        a2b ? 'a_b' : 'b_a'\n      }_with_return_`,\n      typeArguments: typeArguments,\n      arguments: [\n        txb.object(poolId),\n        txb.makeMoveVec({\n          elements: [a2b ? coinVecA! : coinVecB!],\n        }),\n        txb.pure.u64(a2b ? amountA : amountB),\n        txb.pure.u64(\n          this.trade.amountOutWithSlippage(\n            new Decimal(0),\n            options.slippage?.toString() || '99',\n            true,\n          ),\n        ),\n        txb.pure.u128(\n          this.math\n            .tickIndexToSqrtPriceX64(a2b ? MIN_TICK_INDEX : MAX_TICK_INDEX)\n            .toString(),\n        ),\n        txb.pure.bool(true),\n        txb.pure.address(address),\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    txb.transferObjects(\n      [options.onlyTokenB ? coinVecB! : coinVecA!, returnCoinB!, returnCoinA!],\n      address,\n    );\n\n    const finalSwapResult = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: address,\n    });\n\n    let jsonResult: Vault.EventParseJson | undefined;\n    finalSwapResult.events.map((event) => {\n      const eventResult = event.parsedJson as Vault.EventParseJson;\n      if (eventResult.a_to_b !== undefined) {\n        jsonResult = eventResult;\n      }\n    });\n\n    if (!jsonResult) {\n      throw new Error('event does not exist');\n    }\n\n    const [coinA, coinB] = await Promise.all([\n      this.coin.getMetadata(typeArguments[0]),\n      this.coin.getMetadata(typeArguments[1]),\n    ]);\n\n    const _nextTickPrice = this.math.tickIndexToPrice(\n      this.math.bitsToNumber(jsonResult.tick_current_index.bits),\n      coinA.decimals,\n      coinB.decimals,\n    );\n\n    const _sqrt_price = this.trade.sqrtPriceWithSlippage(\n      _nextTickPrice,\n      options.slippage?.toString() || '1',\n      options.onlyTokenB ? true : false,\n      coinA.decimals,\n      coinB.decimals,\n    );\n    return {\n      amountA,\n      amountB,\n      resultAmountA: jsonResult.amount_a,\n      resultAmountB: jsonResult.amount_b,\n      sqrt_price: _sqrt_price,\n      current_index: this.math.bitsToNumber(jsonResult.tick_current_index.bits),\n      prev_index: this.math.bitsToNumber(jsonResult.tick_pre_index.bits),\n      a2b: jsonResult.a_to_b,\n    };\n  }\n\n  protected async onlyTokenSwapWithReturn(options: Vault.OnlyTokenSwapWithReturnOptions) {\n    const {\n      coinTypeA,\n      coinTypeB,\n      liquidity,\n      sqrt_price,\n      lowerIndex,\n      upperIndex,\n      poolId,\n      address,\n      a2b,\n    } = options;\n    let txb = options.txb || new Transaction();\n\n    const [coinA, coinB] = await Promise.all([\n      this.coin.getMetadata(coinTypeA),\n      this.coin.getMetadata(coinTypeB),\n    ]);\n    const current_price = this.math\n      .sqrtPriceX64ToPrice(new BN(sqrt_price), coinA.decimals, coinB.decimals)\n      .toString();\n\n    const [bigAmountA, bigAmountB] = this.pool.getTokenAmountsFromLiquidity({\n      liquidity: new BN(liquidity),\n      currentSqrtPrice: new BN(sqrt_price),\n      lowerSqrtPrice: this.math.tickIndexToSqrtPriceX64(lowerIndex),\n      upperSqrtPrice: this.math.tickIndexToSqrtPriceX64(upperIndex),\n    });\n\n    const amountA = new Decimal(bigAmountA.toString()).div(10 ** coinA.decimals);\n    const amountB = new Decimal(bigAmountB.toString()).div(10 ** coinB.decimals);\n    const total = amountA.mul(current_price).add(amountB);\n\n    const ratioB = amountB.div(total);\n    const ratioA = new Decimal(1).sub(ratioB);\n    const swapAmount = new Decimal(\n      a2b ? options.amountA.toString() : options.amountB.toString(),\n    )\n      .mul(a2b ? ratioB : ratioA)\n      .toFixed(0);\n\n    const swapResult = await this.trade.computeSwapResultV2({\n      pools: [\n        {\n          pool: poolId,\n          a2b,\n          amountSpecified: swapAmount,\n        },\n      ],\n      amountSpecifiedIsInput: true,\n      address,\n    });\n\n    const {\n      txb: transaction,\n      coinVecA,\n      coinVecB,\n    } = await this.trade.swapWithReturn({\n      poolId,\n      coinType: a2b ? coinTypeA : coinTypeB,\n      amountA: a2b ? options.amountA : swapResult[0]!.amount_a,\n      swapAmount: swapAmount,\n      amountB: a2b ? swapResult[0]!.amount_b : options.amountB,\n      nextTickIndex: this.math.bitsToNumber(swapResult[0]!.tick_current_index.bits),\n      slippage: options.slippage?.toString() || '5',\n      amountSpecifiedIsInput: true,\n      a2b,\n      address,\n      deadline: options.deadline,\n      txb: txb,\n    });\n\n    txb = transaction;\n\n    return {\n      txb,\n      coinVecA,\n      coinVecB,\n      swapResultSqrtPrice: swapResult[0]!.sqrt_price,\n    };\n  }\n\n  protected async onlyTokenWithdrawVault(options: Vault.WithdrawVaultArguments) {\n    const { poolId, strategyId, vaultId, percentage, address } = options;\n\n    let devTxb = options.txb ? Transaction.from(options.txb) : new Transaction();\n    const res = await this.computeTokenWithdrawVaultSwapResult({\n      ...options,\n      txb: devTxb,\n    });\n\n    let txb = options.txb || new Transaction();\n    const contract = await this.contract.getConfig();\n    const typeArguments = await this.pool.getPoolTypeArguments(poolId);\n\n    const [coinVecA, coinVecB] = txb.moveCall({\n      target: `${contract.VaultPackageId}::vault::withdraw_v2`,\n      arguments: [\n        txb.object(contract.VaultGlobalConfig),\n        txb.object(contract.VaultUserTierConfig),\n        txb.object(contract.VaultRewarderManager),\n        txb.object(strategyId),\n        txb.object(vaultId),\n        txb.object(poolId),\n        txb.object(contract.Positions),\n        txb.pure.u64(percentage),\n        txb.pure.bool(percentage === 1000000),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        // versioned\n        txb.object(contract.Versioned),\n      ],\n      typeArguments: typeArguments,\n    });\n\n    const a2b = options.onlyTokenB ? true : false;\n    const [returnCoinA, returnCoinB] = txb.moveCall({\n      target: `${contract.PackageId}::swap_router::swap_${\n        a2b ? 'a_b' : 'b_a'\n      }_with_return_`,\n      typeArguments: typeArguments,\n      arguments: [\n        txb.object(poolId),\n        txb.makeMoveVec({\n          elements: [a2b ? coinVecA! : coinVecB!],\n        }),\n        txb.pure.u64(a2b ? res.amountA : res.amountB),\n        txb.pure.u64(\n          this.trade.amountOutWithSlippage(\n            new Decimal(a2b ? res.resultAmountB : res.resultAmountA),\n            options.slippage?.toString() || '1',\n            true,\n          ),\n        ),\n        txb.pure.u128(res.sqrt_price),\n        txb.pure.bool(true),\n        txb.pure.address(address),\n        txb.pure.u64(Date.now() + (options.deadline || ONE_MINUTE * 3)),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.object(contract.Versioned),\n      ],\n    });\n\n    txb.transferObjects(\n      [options.onlyTokenB ? coinVecB! : coinVecA!, returnCoinB!, returnCoinA!],\n      address,\n    );\n\n    return txb;\n  }\n\n  protected async getStrategy(strategyId: string): Promise<Vault.VaultStrategyField> {\n    return this.getCacheOrSet(\n      `strategy-${strategyId}`,\n      async () => {\n        const result = await this.provider.getObject({\n          id: strategyId,\n          options: { showContent: true },\n        });\n        validateObjectResponse(result, 'strategyId');\n        return getObjectFields(result) as unknown as Vault.VaultStrategyField;\n      },\n      1500,\n    );\n  }\n\n  protected async getStrategyVault(\n    vaultId: string,\n    vaultValue: string,\n  ): Promise<Vault.VaultsIdMyStrategyVaultField> {\n    return this.getCacheOrSet(\n      `vaultId-${vaultId}-${vaultValue}`,\n      async () => {\n        const result = await this.provider.getDynamicFieldObject({\n          parentId: vaultId,\n          name: {\n            type: '0x2::object::ID',\n            value: vaultValue,\n          },\n        });\n        validateObjectResponse(result, 'vaultId-value');\n        return getObjectFields(result) as unknown as Vault.VaultsIdMyStrategyVaultField;\n      },\n      1500,\n    );\n  }\n\n  getCalculateVaultStepTick(\n    step: number,\n    tick_spacing: string,\n    sqrt_price: string,\n  ): [number, number] {\n    const tick_space = Number(tick_spacing);\n    const current_index = this.math.sqrtPriceX64ToTickIndex(new BN(sqrt_price));\n\n    const lower_index =\n      current_index - (current_index % tick_space) - (step + 1) * tick_space;\n    const upper_index =\n      current_index - (current_index % tick_space) + (step + 1) * tick_space;\n    return [\n      lower_index < MIN_TICK_INDEX ? MIN_TICK_INDEX : lower_index,\n      upper_index > MAX_TICK_INDEX ? MAX_TICK_INDEX : upper_index,\n    ];\n  }\n\n  async getVaultBalanceAmount(\n    options: Vault.VaultBalanceAmountOptions,\n  ): Promise<[string, string]> {\n    const { strategyId, vaultId, coinTypeA, coinTypeB, address } = options;\n    const txb = new Transaction();\n    const vaultContract = await this.contract.getConfig();\n    txb.moveCall({\n      target: `${vaultContract.VaultPackageId}::vault::vault_balance_amount`,\n      arguments: [txb.object(strategyId), txb.pure.address(vaultId)],\n      typeArguments: [normalizeStructTag(coinTypeA)],\n    });\n\n    txb.moveCall({\n      target: `${vaultContract.VaultPackageId}::vault::vault_balance_amount`,\n      arguments: [txb.object(strategyId), txb.pure.address(vaultId)],\n      typeArguments: [normalizeStructTag(coinTypeB)],\n    });\n\n    try {\n      const result = await this.provider.devInspectTransactionBlock({\n        transactionBlock: txb,\n        sender: address,\n      });\n\n      if (result.error) {\n        return ['0', '0'];\n      }\n\n      return [\n        bcs.U64.parse(Uint8Array.from(result.results![0]!.returnValues![0]![0])),\n        bcs.U64.parse(Uint8Array.from(result.results![1]!.returnValues![0]![0])),\n      ];\n    } catch (err) {\n      console.log(`getVaultBalanceAmount error: ${err}`);\n    }\n    return ['0', '0'];\n  }\n\n  async getMyVaults(address: string) {\n    const vaultContract = await this.contract.getConfig();\n\n    const objects = await forEacGetOwnedObjects<Vault.MyVaultOwnedObjects>(\n      this.provider,\n      address,\n      {\n        Package: vaultContract.VaultOriginPackageId,\n      },\n    );\n\n    const strategyIds = objects.map((item) => item.strategy_id);\n    const strategyObjects = await multiGetObjects(\n      this.provider,\n      Array.from(new Set(strategyIds)),\n      {\n        showContent: true,\n      },\n    );\n    const obj: Record<\n      string,\n      { vaultId: string; clmm_pool_id: string; accountsId: string }\n    > = {};\n    strategyObjects.forEach((item) => {\n      const fields = unstable_getObjectFields(\n        item,\n      ) as unknown as Vault.VaultStrategyField;\n      obj[fields.id.id] = {\n        vaultId: fields.vaults.fields.id.id,\n        clmm_pool_id: fields.clmm_pool_id,\n        accountsId: fields.accounts.fields.id.id,\n      };\n    });\n\n    const gets: Promise<SuiObjectResponse>[] = [];\n    objects.forEach((item) => {\n      if (obj[item.strategy_id]?.vaultId) {\n        gets.push(\n          this.provider.getDynamicFieldObject({\n            parentId: obj[item.strategy_id]!.vaultId,\n            name: {\n              type: '0x2::object::ID',\n              value: item.id.id,\n            },\n          }),\n        );\n      }\n    });\n\n    if (gets.length < 1) {\n      return [];\n    }\n\n    const vaultObjects = await Promise.all(gets);\n\n    const myVaults: Vault.TurbosMyVault[] = objects.map((item) => {\n      const res = vaultObjects.find((vault) => {\n        const fields = unstable_getObjectFields(\n          vault,\n        ) as unknown as Vault.VaultsIdMyStrategyVaultField;\n        return fields.name === item.id.id;\n      })!;\n      const fieldObject = unstable_getObjectFields(\n        res,\n      ) as unknown as Vault.VaultsIdMyStrategyVaultField;\n      const field = fieldObject.value.fields.value.fields;\n\n      return {\n        accountsId: obj[item.strategy_id]!.accountsId,\n        coinTypeA: item.coin_a_type_name.fields.name,\n        coinTypeB: item.coin_b_type_name.fields.name,\n        strategyId: item.strategy_id,\n        url: item.url,\n        name: item.name,\n        id: item.id.id,\n        nftId: item.id.id,\n        vaultId: field.vault_id,\n        baseLowerTick: this.math.bitsToNumber(field.base_lower_index.fields.bits),\n        baseUpperTick: this.math.bitsToNumber(field.base_upper_index.fields.bits),\n        limitLowerTick: this.math.bitsToNumber(field.limit_lower_index.fields.bits),\n        limitUpperTick: this.math.bitsToNumber(field.limit_upper_index.fields.bits),\n        sqrt_price: field.sqrt_price,\n        base_liquidity: field.base_liquidity,\n        limit_liquidity: field.limit_liquidity,\n        clmm_pool_id: obj[item.strategy_id]!.clmm_pool_id,\n        limit_clmm_position_id: field.limit_clmm_position_id,\n        base_clmm_position_id: field.base_clmm_position_id,\n      };\n    });\n\n    const vaultPositions: string[] = [];\n    myVaults.forEach((item) => {\n      !isNullObjectId(item.limit_clmm_position_id) &&\n        vaultPositions.push(item.limit_clmm_position_id);\n      !isNullObjectId(item.base_clmm_position_id) &&\n        vaultPositions.push(item.base_clmm_position_id);\n    });\n\n    const positionObjects = await multiGetObjects(\n      this.provider,\n      Array.from(new Set(vaultPositions)),\n      {\n        showContent: true,\n      },\n    );\n\n    positionObjects.forEach((position) => {\n      const fields = unstable_getObjectFields(position) as unknown as NFT.PositionField;\n      const myVaultPosition = {\n        ...fields,\n        tickLower: this.math.bitsToNumber(fields.tick_lower_index.fields.bits),\n        tickUpper: this.math.bitsToNumber(fields.tick_upper_index.fields.bits),\n        objectId: fields.id.id,\n      };\n\n      let index: number | undefined;\n      const myVault = myVaults.find((item, i) => {\n        const isFind =\n          item.limit_clmm_position_id === fields.id.id ||\n          item.base_clmm_position_id === fields.id.id;\n        if (isFind) {\n          index = i;\n        }\n        return isFind;\n      });\n\n      if (\n        myVault &&\n        index !== undefined &&\n        myVault.limit_clmm_position_id === fields.id.id\n      ) {\n        myVault.limit_clmm_position = myVaultPosition;\n        myVaults[index] = myVault;\n      } else if (\n        myVault &&\n        index !== undefined &&\n        myVault.base_clmm_position_id === fields.id.id\n      ) {\n        myVault.base_clmm_position = myVaultPosition;\n        myVaults[index] = myVault;\n      }\n    });\n\n    return myVaults;\n  }\n\n  async getVaultAmount(options: Vault.TurbosVaultAmount): Promise<[string, string]> {\n    const [baseAmountA, baseAmountB] = this.pool.getTokenAmountsFromLiquidity({\n      liquidity: new BN(\n        options.base_liquidity === undefined ? 100_000_000 : options.base_liquidity,\n      ),\n      currentSqrtPrice: new BN(options.poolSqrtPrice),\n      lowerSqrtPrice: this.math.tickIndexToSqrtPriceX64(options.baseLowerTick),\n      upperSqrtPrice: this.math.tickIndexToSqrtPriceX64(options.baseUpperTick),\n    });\n\n    const [limitAmountA, limitAmountB] = this.pool.getTokenAmountsFromLiquidity({\n      liquidity: new BN(\n        options.limit_liquidity === undefined ? 100_000_000 : options.limit_liquidity,\n      ),\n      currentSqrtPrice: new BN(options.poolSqrtPrice),\n      lowerSqrtPrice: this.math.tickIndexToSqrtPriceX64(options.limitLowerTick),\n      upperSqrtPrice: this.math.tickIndexToSqrtPriceX64(options.limitUpperTick),\n    });\n\n    const [amountA, amountB] = await this.getVaultBalanceAmount({\n      strategyId: options.strategyId,\n      vaultId: options.vaultId,\n      coinTypeA: options.coinTypeA,\n      coinTypeB: options.coinTypeB,\n      address: options.address,\n    });\n\n    return [\n      baseAmountA.add(limitAmountA).add(new BN(amountA)).toString(),\n      baseAmountB.add(limitAmountB).add(new BN(amountB)).toString(),\n    ];\n  }\n}\n","export const isNullObjectId = (objectId: string) => {\n  return (\n    objectId === '0x0000000000000000000000000000000000000000000000000000000000000000'\n  );\n};\n"]}